"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5291],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,k=u["".concat(s,".").concat(c)]||u[c]||p[c]||o;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(87462),r=n(67294),o=n(86010),i=n(12466),l=n(76775),s=n(91980),d=n(67392),m=n(50012);function p(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=u(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,d]=k({queryString:n,groupId:a}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,m.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=s??p;return c({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),b(e)}),[d,b,o]),tabValues:o}}var f=n(72389);const h="tabList__CuJ",y="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:d}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=m.indexOf(t),a=d[n].value;a!==l&&(p(t),s(a))},c=e=>{var t;let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;n=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;n=m[t]??m[m.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>m.push(e),onKeyDown:c,onClick:u},i,{className:(0,o.Z)("tabs__item",y,null==i?void 0:i.className,{"tabs__item--active":l===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function C(e){const t=(0,f.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},55638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),i=n(85162);const l={title:"UpdateItem",sidebar_custom_props:{sidebarActionType:"write"}},s="UpdateItemCommand",d={unversionedId:"entities/actions/update-item/index",id:"entities/actions/update-item/index",title:"UpdateItem",description:"Performs a UpdateItem Operation on an entity item:",source:"@site/docs/3-entities/3-actions/3-update-item/index.md",sourceDirName:"3-entities/3-actions/3-update-item",slug:"/entities/actions/update-item/",permalink:"/docs/entities/actions/update-item/",draft:!1,tags:[],version:"current",frontMatter:{title:"UpdateItem",sidebar_custom_props:{sidebarActionType:"write"}},sidebar:"tutorialSidebar",previous:{title:"PutItem",permalink:"/docs/entities/actions/put-item/"},next:{title:"DeleteItem",permalink:"/docs/entities/actions/delete-item/"}},m={},p=[{value:"Request",id:"request",level:2},{value:"<code>.item(...)</code>",id:"item",level:3},{value:"Removing an attribute",id:"removing-an-attribute",level:3},{value:"References",id:"references",level:3},{value:"Non-nested attributes",id:"non-nested-attributes",level:3},{value:"Nested attributes",id:"nested-attributes",level:3},{value:"<code>.options(...)</code>",id:"options",level:3},{value:"Response",id:"response",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"updateitemcommand"},"UpdateItemCommand"),(0,r.kt)("p",null,"Performs a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html"},"UpdateItem Operation")," on an entity item:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { UpdateItemCommand } from 'dynamodb-toolbox/entity/actions/update'\n\nconst updateItemCommand = PokemonEntity.build(\n  UpdateItemCommand\n)\n\nconst params = updateItemCommand.params()\nawait updateItemCommand.send()\n")),(0,r.kt)("h2",{id:"request"},"Request"),(0,r.kt)("h3",{id:"item"},(0,r.kt)("inlineCode",{parentName:"h3"},".item(...)")),(0,r.kt)("p",{style:{marginTop:"-15px"}},(0,r.kt)("i",null,"(required)")),(0,r.kt)("p",null,"The attributes to update, including the key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { UpdateItemCommand, $add } from 'dynamodb-toolbox/entity/actions/update'\n\nawait PokemonEntity.build(UpdateItemCommand)\n  .item({\n    pokemonId: 'pikachu1',\n    level: $add(1),\n    ...\n  })\n  .send()\n")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItemInput")," type to explicitly type an object as a ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItemCommand")," item object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import type { UpdateItemInput } from 'dynamodb-toolbox/entity/actions/update'\n\nconst item: UpdateItemInput<typeof PokemonEntity> = {\n  pokemonId: 'pikachu1',\n  level: $add(1),\n  ...\n}\n\nawait PokemonEntity.build(UpdateItemCommand).item(item).send()\n")),(0,r.kt)("h3",{id:"removing-an-attribute"},"Removing an attribute"),(0,r.kt)("p",null,"Any optional attribute can be removed with the ",(0,r.kt)("inlineCode",{parentName:"p"},"$remove")," verb:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { $remove } from 'dynamodb-toolbox'\n\nawait PokemonEntity.build(UpdateItemCommand)\n  .item({\n    pokemonId: 'pikachu1',\n    // \ud83d\udc47 clear 'statusEffect' from pokemon\n    statusEffect: $remove()\n  })\n  .send()\n")),(0,r.kt)("h3",{id:"references"},"References"),(0,r.kt)("p",null,"You can indicate DynamoDB to resolve an attribute ",(0,r.kt)("strong",{parentName:"p"},"at write time")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"$get")," verb:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { $get } from 'dynamodb-toolbox'\n\nawait PokemonEntity.build(UpdateItemCommand)\n  .item({\n    ...\n    level: 42,\n    // \ud83d\udc47 fill 'previousLevel' with current 'level'\n    previousLevel: $get('level')\n  })\n  .send()\n")),(0,r.kt)("p",null,"Self-references are possible. You can also ",(0,r.kt)("strong",{parentName:"p"},"provide a fallback")," as a second argument (which can also be a reference) in case the specified attribute path misses from the item:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await PokemonEntity.build(UpdateItemCommand)\n  .item({\n    ...\n    previousLevel: $get('level', 1),\n    // \ud83d\udc47 fallback can also be a reference!\n    chainedRefs: $get(\n      'firstRef',\n      $get('secondRef', 'Sky is the limit!')\n    )\n  })\n  .send()\n")),(0,r.kt)("p",null,"Note that the attribute path is type-checked, but whether its attribute value extends the updated attribute value is ",(0,r.kt)("strong",{parentName:"p"},"not")," for the moment, so be extra-careful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await PokemonEntity.build(UpdateItemCommand)\n  .item({\n    // \u274c Raises a type error\n    name: $get('non.existing[0].attribute'),\n    // ...but overriding a number by a string doesn't \ud83d\ude48\n    level: $get('name')\n  })\n  .send()\n")),(0,r.kt)("h3",{id:"non-nested-attributes"},"Non-nested attributes"),(0,r.kt)("p",null,"In the case of non-nested attributes (primitives and ",(0,r.kt)("inlineCode",{parentName:"p"},"sets"),"), updates completely override their current values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await PokemonEntity.build(UpdateItemCommand)\n  .item({\n    ...\n    // \ud83d\udc47 Set fields to desired values\n    isLegendary: true,\n    nextLevel: 42,\n    name: 'Pikachu',\n    binEncoded: new Uint8Array(...),\n    skills: new Set(['thunder'])\n  })\n  .send()\n")),(0,r.kt)("p",null,"Numbers benefit from additional ",(0,r.kt)("inlineCode",{parentName:"p"},"$sum"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$subtract")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"$add")," verbs, which can use references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  $add,\n  $subtract,\n  $get\n} from 'dynamodb-toolbox/entity/actions/update'\n\nawait PokemonEntity.build(UpdateItemCommand)\n  .item({\n    ...\n    // \ud83d\udc47 lose 20 health points\n    health: $subtract($get('health'), 20),\n    // \ud83d\udc47 gain 1 level\n    level: $sum($get('level', 0), 1),\n    // ...similar to\n    level: $add(1)\n  })\n  .send()\n")),(0,r.kt)("p",null,"Sets benefit from additional ",(0,r.kt)("inlineCode",{parentName:"p"},"$add")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"$delete")," verbs, which can be used to add or remove specific values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  $add,\n  $delete\n} from 'dynamodb-toolbox/entity/actions/update'\n\nawait PokemonEntity.build(UpdateItemCommand)\n  .item({\n    ...\n    skills: $add(new Set(['thunder', 'dragon-tail'])),\n    types: $delete(new Set(['flight']))\n  })\n  .send()\n")),(0,r.kt)("h3",{id:"nested-attributes"},"Nested attributes"),(0,r.kt)("p",null,"In the case of nested attributes, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"lists"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"maps")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"records"),", updates are ",(0,r.kt)("strong",{parentName:"p"},"partial by default"),". You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"$set")," verb to specify a complete override:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// \ud83d\udc47 Partial overrides\nawait PokemonEntity.build(UpdateItemCommand)\n  .item({\n    ...\n    // \ud83d\udc47 Elements 0 and 2 are updated\n    skills: ['thunder', undefined, $remove()],\n    // ...similar to\n    skills: {\n      0: 'thunder',\n      2: $remove()\n    },\n    // \ud83d\udc47 map example\n    some: {\n      nested: {\n        field: 'foo'\n      }\n    },\n    // Record\n    bestSkillByType: {\n      electric: 'thunder',\n      flight: $remove()\n    }\n  })\n  .send()\n\nimport { $set } from 'dynamodb-toolbox'\n\n// \ud83d\udc47 Complete overrides\nawait PokemonEntity.build(UpdateItemCommand).item({\n  ...\n  // reset list\n  skills: $set(['thunder']),\n  // Removes all other map attributes\n  some: $set({\n    nested: {\n      field: 'foo',\n      otherField: 42\n    }\n  }),\n  // Removes all other record keys\n  bestSkillByType: $set({\n    electric: 'thunder'\n  })\n})\n")),(0,r.kt)("p",null,"Lists benefit from additional ",(0,r.kt)("inlineCode",{parentName:"p"},"$append")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"$prepend")," verbs, which can use references:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"PokemonEntity.build(UpdateItemCommand).item({\n  ...\n  skills: $append(['thunder', 'dragon-tail']),\n  levelHistory: $append($get('level')),\n  types: $prepend(['flight']),\n});\n")),(0,r.kt)("h3",{id:"options"},(0,r.kt)("inlineCode",{parentName:"h3"},".options(...)")),(0,r.kt)("p",null,"Provides additional options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await PokemonEntity.build(UpdateItemCommand)\n  .item(...)\n  .options({\n    returnValues: 'UPDATED_OLD',\n    capacity: 'TOTAL',\n    ...\n  })\n  .send()\n")),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItemOptions")," type to explicitly type an object as an ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItemCommand")," options object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import type { UpdateItemOptions } from 'dynamodb-toolbox/entity/actions/update'\n\nconst options: UpdateItemOptions<typeof PokemonEntity> = {\n  returnValues: 'UPDATED_OLD',\n  capacity: 'TOTAL',\n  ...\n}\n\nawait PokemonEntity.build(UpdateItemCommand)\n  .item(...)\n  .options(options)\n  .send()\n")),(0,r.kt)("p",null,"Available options (see the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html#API_UpdateItem_RequestParameters"},"DynamoDB documentation")," for more details):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"condition")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Condition<typeof PokemonEntity>")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"A condition that must be satisfied in order for the ",(0,r.kt)("inlineCode",{parentName:"td"},"UpdateItemCommand")," to succeed.",(0,r.kt)("br",null),(0,r.kt)("br",null),"See the ",(0,r.kt)("a",{parentName:"td",href:"/docs/entities/actions/parse-condition/#building-conditions"},(0,r.kt)("inlineCode",{parentName:"a"},"ConditionParser"))," action for more details on how to write conditions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"returnValues")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ReturnValuesOption")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"NONE"')),(0,r.kt)("td",{parentName:"tr",align:null},"To get the item attributes as they appeared before they were updated with the request.",(0,r.kt)("br",null),(0,r.kt)("br",null),"Possible values are ",(0,r.kt)("inlineCode",{parentName:"td"},'"NONE"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"UPDATED_NEW"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"ALL_NEW"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"UPDATED_OLD"')," and ",(0,r.kt)("inlineCode",{parentName:"td"},'"ALL_OLD"'),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"metrics")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"MetricsOption")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"NONE"')),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether item collection metrics are returned.",(0,r.kt)("br",null),(0,r.kt)("br",null),"Possible values are ",(0,r.kt)("inlineCode",{parentName:"td"},'"NONE"')," and ",(0,r.kt)("inlineCode",{parentName:"td"},'"SIZE"'),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"capacity")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"CapacityOption")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"NONE"')),(0,r.kt)("td",{parentName:"tr",align:null},"Determines the level of detail about provisioned or on-demand throughput consumption that is returned in the response.",(0,r.kt)("br",null),(0,r.kt)("br",null),"Possible values are ",(0,r.kt)("inlineCode",{parentName:"td"},'"NONE"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"TOTAL"')," and ",(0,r.kt)("inlineCode",{parentName:"td"},'"INDEXES"'),".")))),(0,r.kt)("admonition",{title:"Examples",type:"note"},(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"conditional",label:"Conditional write",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await PokemonEntity.build(UpdateItemCommand)\n  .item({\n    pokemonId: 'pikachu1',\n    level: $add(1)\n  })\n  .options({\n    // \ud83d\udc47 Make sure that 'level' stays <= 99\n    condition: { attr: 'level', lt: 99 }\n  })\n  .send()\n"))),(0,r.kt)(i.Z,{value:"return-values",label:"Return values",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { Attributes: prevPikachu } =\n  await PokemonEntity.build(UpdateItemCommand)\n    .item({\n      pokemonId: 'pikachu1',\n      level: $add(1)\n    })\n    .options({ returnValues: 'ALL_OLD' })\n    .send()\n"))))),(0,r.kt)("h2",{id:"response"},"Response"),(0,r.kt)("p",null,"The data is returned with the same response syntax as from the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html#API_UpdateItem_ResponseElements"},"DynamoDB UpdateItem API"),". If present, the returned attributes are formatted by the Entity."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItemResponse")," type to explicitly type an object as a ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateItemCommand")," response object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import type { UpdateItemResponse } from 'dynamodb-toolbox/entity/actions/update'\n\nconst response: UpdateItemResponse<\n  typeof PokemonEntity,\n  // \ud83d\udc47 Optional options\n  { returnValues: 'ALL_OLD' }\n  // \ud83d\udc47 Typed as Pokemon\xa0| undefined\n> = { Attributes: ... }\n")))}c.isMDXComponent=!0}}]);