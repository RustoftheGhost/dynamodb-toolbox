"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4133],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>c});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),y=r,c=d["".concat(s,".").concat(y)]||d[y]||m[y]||i;return t?a.createElement(c,l(l({ref:n},u),{},{components:t})):a.createElement(c,l({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=y;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},23727:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(58168),r=(t(96540),t(15680));const i={title:"Defaults & Links"},l="Defaults & Links",o={unversionedId:"schemas/defaults-and-links/index",id:"schemas/defaults-and-links/index",title:"Defaults & Links",description:"Defaults",source:"@site/docs/4-schemas/3-defaults-and-links/index.md",sourceDirName:"4-schemas/3-defaults-and-links",slug:"/schemas/defaults-and-links/",permalink:"/docs/schemas/defaults-and-links/",draft:!1,tags:[],version:"current",frontMatter:{title:"Defaults & Links"},sidebar:"tutorialSidebar",previous:{title:"Warm vs Frozen",permalink:"/docs/schemas/warm-vs-frozen/"},next:{title:"Custom Validation",permalink:"/docs/schemas/custom-validation/"}},s={},p=[{value:"Defaults",id:"defaults",level:2},{value:"Links",id:"links",level:2},{value:"Update Syntax",id:"update-syntax",level:3}],u={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"defaults--links"},"Defaults & Links"),(0,r.yg)("h2",{id:"defaults"},"Defaults"),(0,r.yg)("p",null,"All attribute types support providing default values. There are three kinds of defaults:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"putDefault"),": Applied on put actions (e.g. ",(0,r.yg)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,r.yg)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"updateDefault"),": Applied on update actions (e.g. ",(0,r.yg)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,r.yg)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"keyDefault"),": Overrides other defaults on key attributes (ignored otherwise)")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"default")," method is a shorthand that acts as ",(0,r.yg)("inlineCode",{parentName:"p"},"keyDefault")," on key attributes and ",(0,r.yg)("inlineCode",{parentName:"p"},"putDefault")," otherwise."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"\u261d\ufe0f In order for the ",(0,r.yg)("inlineCode",{parentName:"p"},".default(...)")," shorthand to work properly on key attributes, make sure to use it ",(0,r.yg)("strong",{parentName:"p"},"after")," calling ",(0,r.yg)("inlineCode",{parentName:"p"},".key()"),".")),(0,r.yg)("p",null,"Here are some simple examples:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const nameSchema = string().default('Pikachu')\n\n// \ud83d\ude4c Getters also work!\nconst createdSchema = string().default(() =>\n  new Date().toISOString()\n)\n\nconst updatesCountSchema = number()\n  .putDefault(1)\n  .updateDefault(() => $add(1))\n")),(0,r.yg)("h2",{id:"links"},"Links"),(0,r.yg)("p",null,"In DynamoDB, it is frequent to ",(0,r.yg)("strong",{parentName:"p"},"infer attribute values from other attributes")," (e.g. for secondary indexes). In DynamoDB-Toolbox, this is called ",(0,r.yg)("em",{parentName:"p"},"linking")," attributes."),(0,r.yg)("p",null,"In TypeScript, the difficulty is that it's ",(0,r.yg)("strong",{parentName:"p"},"impossible")," to pass the shape of the parent schema to the ",(0,r.yg)("inlineCode",{parentName:"p"},".default")," method, and thus efficiently type the link arguments:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemonSchema = schema({\n  ...\n  level: number(),\n  levelPlusOne: number().default(\n    // \u274c Cannot infer the type\n    input => input.level + 1\n  )\n})\n")),(0,r.yg)("p",null,"The solution is to make good use of the ",(0,r.yg)("inlineCode",{parentName:"p"},".and(...)")," method (see ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/warm-vs-frozen/#extension"},"Extending Schemas"),") and build the schema ",(0,r.yg)("strong",{parentName:"p"},"in two steps"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemonSchema = schema({\n  ...\n  level: number()\n}).and(prevSchema => ({\n  levelPlusOne: number().link<typeof prevSchema>(\n    // \ud83d\ude4c Correctly typed!\n    ({ level }) => level + 1\n  )\n}))\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"This is only required if you need type inference. In vanilla JS, ",(0,r.yg)("inlineCode",{parentName:"p"},"links")," can be used directly in the original schema.")),(0,r.yg)("p",null,"Similarly to defaults, links come in three flavors:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"putLink"),": Applied on put actions (e.g. ",(0,r.yg)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,r.yg)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"updateLink"),": Applied on update actions (e.g. ",(0,r.yg)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,r.yg)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"keyLink"),": Overrides other links on key attributes (ignored otherwise)")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"link")," method is a shorthand that acts as ",(0,r.yg)("inlineCode",{parentName:"p"},"keyLink")," on key attributes and ",(0,r.yg)("inlineCode",{parentName:"p"},"putLink")," otherwise."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"\u261d\ufe0f In order for the ",(0,r.yg)("inlineCode",{parentName:"p"},".link(...)")," shorthand to work properly on key attributes, make sure to use it ",(0,r.yg)("strong",{parentName:"p"},"after")," calling ",(0,r.yg)("inlineCode",{parentName:"p"},".key()"),".")),(0,r.yg)("p",null,"Note that ",(0,r.yg)("strong",{parentName:"p"},"defaults are computed before links"),", so you can safely use defaults within links (see the ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/actions/parse"},(0,r.yg)("inlineCode",{parentName:"a"},"Parser"))," action for more details)."),(0,r.yg)("h3",{id:"update-syntax"},"Update Syntax"),(0,r.yg)("p",null,"If you use TypeScript, you may notice that the ",(0,r.yg)("inlineCode",{parentName:"p"},"updateLink")," input type can be quite complex. This is to reflect that ",(0,r.yg)("strong",{parentName:"p"},"extended syntax")," (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"$add"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"$get")," etc.) is also passed to ",(0,r.yg)("inlineCode",{parentName:"p"},"updateLink"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemonSchema = schema({\n  ...\n  level: number()\n}).and(prevSchema => ({\n  levelPlusOne: number().updateLink<typeof prevSchema>(\n    ({ level }) => {\n      if (level === undefined) {\n        return undefined\n      }\n\n      // \u274c `level` may be `$add(1)`, `$get('otherAttr')` etc.\n      return level + 1\n    }\n  )\n}))\n")),(0,r.yg)("p",null,"If you want to leverage extended syntax within the link, check the ",(0,r.yg)("a",{parentName:"p",href:"/docs/entities/actions/update-item/#extended-syntax"},(0,r.yg)("inlineCode",{parentName:"a"},"UpdateItemCommand"))," docs for more details. If you don't, you can escape it with the ",(0,r.yg)("inlineCode",{parentName:"p"},"isExtension")," type guard:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { isExtension } from 'dynamodb-toolbox/entity/actions/update/symbols'\n\nconst pokemonSchema = schema({\n  ...\n  level: number()\n}).and(prevSchema => ({\n  levelPlusOne: number().updateLink<typeof prevSchema>(\n    ({ level }) => {\n      if (level === undefined || isExtension(level)) {\n        return undefined\n      }\n\n      // \ud83d\ude4c `level` is a number\n      return level + 1\n    }\n  )\n}))\n")))}m.isMDXComponent=!0}}]);