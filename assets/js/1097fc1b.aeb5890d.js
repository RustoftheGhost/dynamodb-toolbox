"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4234],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>u});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=a.createContext({}),c=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},l=function(t){var e=c(t.components);return a.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,p=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),m=c(n),u=o,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(k,r(r({ref:e},l),{},{components:n})):a.createElement(k,r({ref:e},l))}));function u(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},65091:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const i={title:"TransactUpdate",sidebar_custom_props:{sidebarActionType:"write"}},r="UpdateTransaction",s={unversionedId:"entities/actions/transact-update/index",id:"entities/actions/transact-update/index",title:"TransactUpdate",description:"Builds a transaction to update an entity item, to be used within TransactWriteItems operations:",source:"@site/docs/3-entities/3-actions/12-transact-update/index.md",sourceDirName:"3-entities/3-actions/12-transact-update",slug:"/entities/actions/transact-update/",permalink:"/docs/entities/actions/transact-update/",draft:!1,tags:[],version:"current",frontMatter:{title:"TransactUpdate",sidebar_custom_props:{sidebarActionType:"write"}},sidebar:"tutorialSidebar",previous:{title:"TransactPut",permalink:"/docs/entities/actions/transact-put/"},next:{title:"TransactDelete",permalink:"/docs/entities/actions/transact-delete/"}},p={},c=[{value:"Request",id:"request",level:2},{value:"<code>.item(...)</code>",id:"item",level:3},{value:"<code>.options(...)</code>",id:"options",level:3}],l={toc:c};function d(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"updatetransaction"},"UpdateTransaction"),(0,o.kt)("p",null,"Builds a transaction to update an entity item, to be used within ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { execute } from 'dynamodb-toolbox/entity/actions/transactWrite'\nimport { UpdateTransaction } from 'dynamodb-toolbox/entity/actions/transactUpdate'\n\nconst transaction = PokemonEntity.build(UpdateTransaction)\n\nconst params = transaction.params()\nawait execute(transaction, ...otherTransactions)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"UpdateTransactions")," can be executed in conjunction with ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/transact-put/"},(0,o.kt)("inlineCode",{parentName:"a"},"PutTransactions")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/transact-delete/"},(0,o.kt)("inlineCode",{parentName:"a"},"DeleteTransactions"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/condition-check/"},(0,o.kt)("inlineCode",{parentName:"a"},"ConditionChecks")),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Check the ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/transactions/#transactwrite"},"Transaction Documentation")," to learn more about the ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," function.")),(0,o.kt)("h2",{id:"request"},"Request"),(0,o.kt)("h3",{id:"item"},(0,o.kt)("inlineCode",{parentName:"h3"},".item(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,"(required)")),(0,o.kt)("p",null,"The attributes to update, including the key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { $add } from 'dynamodb-toolbox/entity/actions/update'\n\nconst transaction = PokemonEntity.build(UpdateTransaction)\n  .item({\n    pokemonId: 'pikachu1',\n    level: $add(1),\n    ...\n  })\n")),(0,o.kt)("p",null,"Check the ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/update-item/"},(0,o.kt)("inlineCode",{parentName:"a"},"UpdateItemCommand"))," action to learn more about the ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateItem")," syntax. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateItemInput")," type to explicitly type an object as an ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateTransaction")," item object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { UpdateItemInput } from 'dynamodb-toolbox/entity/actions/update'\n\nconst item: UpdateItemInput<typeof PokemonEntity> = {\n  pokemonId: 'pikachu1',\n  level: $add(1),\n  ...\n}\n\nconst transaction = PokemonEntity.build(\n  UpdateTransaction\n).item(item)\n")),(0,o.kt)("h3",{id:"options"},(0,o.kt)("inlineCode",{parentName:"h3"},".options(...)")),(0,o.kt)("p",null,"Provides additional options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const transaction = PokemonEntity.build(UpdateTransaction)\n  .item({\n    pokemonId: 'pikachu1',\n    level: $add(1),\n    ...\n  })\n  .options({\n    // \ud83d\udc47 Make sure that 'level' stays <= 99\n    condition: { attr: 'level', lt: 99 }\n  })\n")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateTransactionOptions")," type to explicitly type an object as a ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateTransaction")," options object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { UpdateTransactionOptions } from 'dynamodb-toolbox/entity/actions/transactUpdate'\n\nconst options: UpdateTransactionOptions<\n  typeof PokemonEntity\n> = {\n  condition: { attr: 'level', lt: 99 }\n}\n\nconst transaction = PokemonEntity.build(UpdateTransaction)\n  .item(...)\n  .options(options)\n")),(0,o.kt)("p",null,"Available options (see the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html#API_TransactWriteItems_RequestParameters"},"DynamoDB documentation")," for more details):"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"condition")),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("inlineCode",{parentName:"td"},"Condition<typeof PokemonEntity>")),(0,o.kt)("td",{parentName:"tr",align:"center"},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"A condition that must be satisfied in order for the ",(0,o.kt)("inlineCode",{parentName:"td"},"UpdateTransaction")," to succeed.",(0,o.kt)("br",null),(0,o.kt)("br",null),"See the ",(0,o.kt)("a",{parentName:"td",href:"/docs/entities/actions/parse-condition/#building-conditions"},(0,o.kt)("inlineCode",{parentName:"a"},"ConditionParser"))," action for more details on how to write conditions.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"PokemonEntity.build(UpdateTransaction)\n  .item(...)\n  .options({\n    condition: { attr: 'level', lt: 99 }\n  })\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Contrary to ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/update-item/"},(0,o.kt)("inlineCode",{parentName:"a"},"UpdateItemCommands")),", update transactions cannot return the previous or new values of the written items.")))}d.isMDXComponent=!0}}]);