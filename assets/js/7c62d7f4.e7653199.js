"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9948],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=m(n),y=o,g=c["".concat(l,".").concat(y)]||c[y]||d[y]||i;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},25395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(58168),o=(n(96540),n(15680));const i={title:"Usage"},r="Usage",s={unversionedId:"getting-started/usage/index",id:"getting-started/usage/index",title:"Usage",description:"DynamoDB-Toolbox mainly exposes three classes:",source:"@site/docs/1-getting-started/3-usage/index.md",sourceDirName:"1-getting-started/3-usage",slug:"/getting-started/usage/",permalink:"/docs/getting-started/usage/",draft:!1,tags:[],version:"current",frontMatter:{title:"Usage"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/getting-started/installation/"},next:{title:"Usage",permalink:"/docs/tables/usage/"}},l={},m=[{value:"Instantiation",id:"instantiation",level:2},{value:"Methods vs Actions",id:"methods-vs-actions",level:2},{value:"Aborting an Action",id:"aborting-an-action",level:2},{value:"How do Actions work?",id:"how-do-actions-work",level:2}],p={toc:m},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(c,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"usage"},"Usage"),(0,o.yg)("p",null,"DynamoDB-Toolbox mainly exposes three classes:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"\ud83c\udfd7\ufe0f ",(0,o.yg)("a",{parentName:"li",href:"/docs/tables/usage/"},"Tables")," that describe the configuration of your DynamoDB Tables"),(0,o.yg)("li",{parentName:"ul"},"\ud83d\udc36 ",(0,o.yg)("a",{parentName:"li",href:"/docs/entities/usage/"},"Entities")," that categorize the items contained in your Tables"),(0,o.yg)("li",{parentName:"ul"},"\ud83d\udcd0 ",(0,o.yg)("a",{parentName:"li",href:"/docs/schemas/usage/"},"Schemas")," that list the attributes of your entities")),(0,o.yg)("mermaid",{value:"flowchart LR\n  classDef mmddescription fill:none,stroke:none,font-style:italic\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n  classDef mmdspace fill:none,stroke:none,color:#0000\n\n  subgraph Tables\n    space1( ):::mmdspace\n    space2( ):::mmdspace\n    pokeTable(PokeTable<br/><i><small>Primary key,<br/>indexes...</small></i>)\n    space3( ):::mmdspace\n    tableDescription(...describe the<br/><b>DynamoDB<br/>configuration</b>.<br/>):::mmddescription\n  end\n\n  Tables:::mmdcontainer\n\n  subgraph Entities\n    space4( ):::mmdspace\n    pokemonEntity(PokemonEntity<br/><i><small>Pokemon items</small></i>)\n    space5( ):::mmdspace\n    trainerEntity(TrainerEntity<br/><i><small>Trainer items</small></i>)\n\n    pokeTable --\x3e pokemonEntity\n    pokeTable --\x3e trainerEntity\n\n    entitiesDescription(...categorize the <b>items</b><br/>contained in the Table.):::mmddescription\n  end\n\n\n  Entities:::mmdcontainer\n\n  subgraph Schemas\n    space6( ):::mmdspace\n    pokemonSchema(pokemonSchema<br/><i><small>Pokemon attributes</small></i>)\n    trainerSchema(trainerSchema<br/><i><small>Trainer attributes</small></i>)\n    levelSchema(levelSchema)\n    nameSchema(nameSchema)\n    otherSchemas(<small>...</small>):::mmddescription\n    hairStyleSchema(hairStyleSchema)\n    schemasDescription(...list <b>attributes</b><br/>of the Table entities.):::mmddescription\n\n    pokemonEntity--\x3epokemonSchema\n    trainerEntity--\x3etrainerSchema\n    pokemonSchema-- <i>level</i> attr. --\x3elevelSchema\n    pokemonSchema-- <i>name</i> attr. --\x3enameSchema\n    trainerSchema-- <i>name</i> attr. --\x3enameSchema\n    trainerSchema-- <i>hairStyle</i> attr. --\x3ehairStyleSchema\n    schemasDescription ~~~ hairStyleSchema\n  end\n\n  Schemas:::mmdcontainer"}),(0,o.yg)("h2",{id:"instantiation"},"Instantiation"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { Table } from 'dynamodb-toolbox/table'\nimport { Entity } from 'dynamodb-toolbox/entity'\nimport { schema } from 'dynamodb-toolbox/schema'\n\n// Define a Table\nconst PokeTable = new Table(...)\n\n// Define an entity\nconst PokemonEntity = new Entity({\n  // Assign it to a table\n  table: PokeTable,\n  // Specify its schema\n  schema: schema(...)\n  ...\n})\n")),(0,o.yg)("p",null,"An entity must belong to a Table, but the same Table can contain items from several entities. DynamoDB-Toolbox is designed with ",(0,o.yg)("a",{parentName:"p",href:"https://www.alexdebrie.com/posts/dynamodb-single-table/"},"Single Tables")," in mind, but works just as well with multiple tables, it'll still make your life much easier (batch gets and writes support multiple tables, so we've got you covered)."),(0,o.yg)("p",null,"Once you have defined your ",(0,o.yg)("inlineCode",{parentName:"p"},"Tables")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Entities"),". You can start using them in combination with ",(0,o.yg)("a",{parentName:"p",href:"#methods-vs-actions"},"Actions"),"."),(0,o.yg)("h2",{id:"methods-vs-actions"},"Methods vs Actions"),(0,o.yg)("p",null,"Queries, updates, transactions, batch operations... DynamoDB has a ",(0,o.yg)("strong",{parentName:"p"},"wide range of features"),". Exposing all of them as distinct methods would ",(0,o.yg)("strong",{parentName:"p"},"bloat the ",(0,o.yg)("inlineCode",{parentName:"strong"},"Entity")," and ",(0,o.yg)("inlineCode",{parentName:"strong"},"Table")," classes"),". Class methods are not tree-shakable, and why bother bundling the code needed for a feature (which can be quite large) if you don't need it?"),(0,o.yg)("p",null,"Instead, ",(0,o.yg)("inlineCode",{parentName:"p"},"Tables"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Entities")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"Schemas")," have a single ",(0,o.yg)("inlineCode",{parentName:"p"},".build")," method which is exactly ",(0,o.yg)("strong",{parentName:"p"},"1-line long")," \ud83e\udd2f and acts as a gateway to perform ",(0,o.yg)("a",{parentName:"p",href:"#how-do-actions-work"},"Actions"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\nconst { Item } = await PokemonEntity.build(GetItemCommand)\n  .key(key)\n  .send()\n")),(0,o.yg)("p",null,"DynamoDB operations like the ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/get-item/"},"GetItemCommand")," are instances of actions, but DynamoDB-Toolbox also exposes utility actions, e.g. for ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/parse/"},"parsing"),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/format/"},"formatting")," or ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/spy/"},"spying"),"."),(0,o.yg)("p",null,"The syntax is a bit more verbose than a simple ",(0,o.yg)("inlineCode",{parentName:"p"},"PokemonEntity.get(key)"),", but it allows for ",(0,o.yg)("strong",{parentName:"p"},"extensibility"),", ",(0,o.yg)("strong",{parentName:"p"},"better code-splitting")," and ",(0,o.yg)("strong",{parentName:"p"},"lighter bundles")," while keeping an intuitive ",(0,o.yg)("strong",{parentName:"p"},"entity-oriented")," and ",(0,o.yg)("strong",{parentName:"p"},"type-inheriting syntax"),"."),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"Notice how the action is imported through a deep import, thanks to the ",(0,o.yg)("a",{parentName:"p",href:"https://nodejs.org/api/packages.html#subpath-exports"},(0,o.yg)("inlineCode",{parentName:"a"},"exports"))," field of the ",(0,o.yg)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.yg)("p",{parentName:"admonition"},"Although all classes and actions are exposed in the main entry path, we recommend using subpaths, and that's what we'll do in the rest of the documentation.")),(0,o.yg)("h2",{id:"aborting-an-action"},"Aborting an Action"),(0,o.yg)("p",null,"All the actions that use the DocumentClient (like the ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/get-item/"},"GetItemCommand"),") expose an asynchronous ",(0,o.yg)("inlineCode",{parentName:"p"},".send()")," method to perform the underlying operation."),(0,o.yg)("p",null,"Any option provided to this method is passed to the DocumentClient. This includes the ",(0,o.yg)("inlineCode",{parentName:"p"},"abortSignal")," option mentioned in the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/aws/aws-sdk-js-v3?tab=readme-ov-file#abortcontroller-example"},"AWS SDK documentation"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"const abortController = new AbortController()\nconst abortSignal = abortController.signal\n\nconst { Item } = await PokemonEntity.build(GetItemCommand)\n  .key(key)\n  .send({ abortSignal })\n\n// \ud83d\udc47 Aborts the command\nabortController.abort()\n")),(0,o.yg)("h2",{id:"how-do-actions-work"},"How do Actions work?"),(0,o.yg)("p",null,"There are three types of actions: ",(0,o.yg)("a",{parentName:"p",href:"/docs/tables/actions/scan/"},"Table Actions"),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/get-item/"},"Entity Actions")," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/schemas/actions/parse"},"Schema Actions"),"."),(0,o.yg)("p",null,"Each type of action is essentially a class that respectively accepts a ",(0,o.yg)("inlineCode",{parentName:"p"},"Table"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Entity")," or a ",(0,o.yg)("inlineCode",{parentName:"p"},"Schema")," as the first parameter of its constructor, with all other parameters being optional."),(0,o.yg)("p",null,"For instance, here's the definition of a simple ",(0,o.yg)("inlineCode",{parentName:"p"},"NameGetter")," action that... well, gets the name of an ",(0,o.yg)("inlineCode",{parentName:"p"},"Entity"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import {\n  Entity,\n  EntityAction\n} from 'dynamodb-toolbox/entity'\n\nexport class NameGetter<\n  ENTITY extends Entity = Entity\n> extends EntityAction<ENTITY> {\n  constructor(entity: ENTITY) {\n    super(entity)\n  }\n\n  get(): ENTITY['name'] {\n    return this.entity.name\n  }\n}\n\nconst pokeNameGetter = PokemonEntity.build(NameGetter)\n// => NameGetter<typeof PokemonEntity>\nconst pokemonEntityName = pokeNameGetter.get()\n// => \"POKEMON\"\n")),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"PokemonEntity.build")," simply ",(0,o.yg)("strong",{parentName:"p"},"instanciates a ",(0,o.yg)("em",{parentName:"strong"},"new")," action")," with ",(0,o.yg)("inlineCode",{parentName:"p"},"PokemonEntity")," as the constructor first parameter. Another way to do it would be:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"const pokeNameGetter = new NameGetter(PokemonEntity)\n")),(0,o.yg)("p",null,"Although, we find, this action-oriented syntax is ",(0,o.yg)("strong",{parentName:"p"},"less readable")," than the entity-oriented one, it leads to exactly the same result, so feel free to use it if you prefer!"),(0,o.yg)("p",null,"Here's a comparison of both syntaxes on the ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/get-item/"},(0,o.yg)("inlineCode",{parentName:"a"},"GetItemCommand"))," action:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"// \ud83d\udc47 Entity-oriented\nconst { Item } = await PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'pikachu1' })\n  .options({ consistent: true })\n  .send()\n\n// \ud83d\udc47 Action-oriented\nconst { Item } = await new GetItemCommand(\n  PokemonEntity,\n  { pokemonId: 'pikachu1' },\n  { consistent: true }\n).send()\n")))}d.isMDXComponent=!0}}]);