"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8935],{15680:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>d});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),l=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=l(e.components);return n.createElement(m.Provider,{value:a},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=l(t),y=r,d=g["".concat(m,".").concat(y)]||g[y]||c[y]||s;return t?n.createElement(d,o(o({ref:a},p),{},{components:t})):n.createElement(d,o({ref:a},p))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=y;var i={};for(var m in a)hasOwnProperty.call(a,m)&&(i[m]=a[m]);i.originalType=e,i[g]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},61810:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(58168),r=(t(96540),t(15680));const s={title:"Usage"},o="Schema",i={unversionedId:"schemas/usage/index",id:"schemas/usage/index",title:"Usage",description:"A Schema is a list of attributes that describe the items of an Entity:",source:"@site/docs/4-schemas/1-usage/index.md",sourceDirName:"4-schemas/1-usage",slug:"/schemas/usage/",permalink:"/docs/schemas/usage/",draft:!1,tags:[],version:"current",frontMatter:{title:"Usage"},sidebar:"tutorialSidebar",previous:{title:"Spy",permalink:"/docs/entities/actions/spy/"},next:{title:"Defaults & Links",permalink:"/docs/schemas/defaults-and-links/"}},m={},l=[{value:"Attribute Types",id:"attribute-types",level:2},{value:"Fine-Tuning Attributes",id:"fine-tuning-attributes",level:2},{value:"Warm vs Frozen",id:"warm-vs-frozen",level:2},{value:"Updating Schemas",id:"updating-schemas",level:2},{value:"<code>and(...)</code>",id:"and",level:3},{value:"<code>pick(...)</code>",id:"pick",level:3},{value:"<code>omit(...)</code>",id:"omit",level:3}],p={toc:l},g="wrapper";function c(e){let{components:a,...t}=e;return(0,r.yg)(g,(0,n.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"schema"},"Schema"),(0,r.yg)("p",null,"A ",(0,r.yg)("inlineCode",{parentName:"p"},"Schema")," is a list of attributes that describe the items of an ",(0,r.yg)("a",{parentName:"p",href:"/docs/entities/usage/"},(0,r.yg)("inlineCode",{parentName:"a"},"Entity")),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { schema } from 'dynamodb-toolbox/schema'\nimport { string } from 'dynamodb-toolbox/attributes/string'\nimport { number } from 'dynamodb-toolbox/attributes/number'\n\nconst pokemonSchema = schema({\n  pokemonId: string().key(),\n  level: number().default(1),\n  pokeType: string()\n    .enum('fire', 'water', 'grass')\n    .optional()\n})\n\nconst PokemonEntity = new Entity({\n  ...,\n  schema: pokemonSchema\n})\n")),(0,r.yg)("p",null,"Schemas always start with a ",(0,r.yg)("strong",{parentName:"p"},"root object"),", listing ",(0,r.yg)("a",{parentName:"p",href:"#attributes"},(0,r.yg)("strong",{parentName:"a"},"attributes"))," by their names."),(0,r.yg)("h2",{id:"attribute-types"},"Attribute Types"),(0,r.yg)("p",null,"Schema attributes can be imported by their ",(0,r.yg)("strong",{parentName:"p"},"dedicated exports"),", or through the ",(0,r.yg)("inlineCode",{parentName:"p"},"attribute")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"attr")," shorthands. For instance, those declarations output the same attribute:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"// \ud83d\udc47 More tree-shakable\nimport { string } from 'dynamodb-toolbox/attributes/string'\n\nconst nameAttr = string()\n\n// \ud83d\udc47 Less tree-shakable, but single import\nimport {\n  attribute,\n  attr\n} from 'dynamodb-toolbox/attributes'\n\nconst nameAttr = attribute.string()\nconst nameAttr = attr.string()\n")),(0,r.yg)("p",null,"Available attribute types are:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/any/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"any")))," - Contains any value"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/null/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"null")))," - Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"null")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/boolean/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"boolean")))," - Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"booleans")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/number/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"number"))),": Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"numbers")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/string/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"string"))),": Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"strings")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/binary/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"binary"))),": Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"binaries")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/set/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"set"))),": Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"sets")," of either ",(0,r.yg)("inlineCode",{parentName:"li"},"number"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"string"),", or ",(0,r.yg)("inlineCode",{parentName:"li"},"binary")," elements"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/list/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"list"))),": Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"lists")," of elements of any type"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/map/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"map"))),": Contains ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"maps"),", i.e. a finite list of key-value pairs, values being child attributes of any type"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/record/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"record"))),": Contains a different kind of ",(0,r.yg)("a",{parentName:"li",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"maps")," - Records differ from ",(0,r.yg)("inlineCode",{parentName:"li"},"maps")," as they have a non-explicit (potentially infinite) range of keys, but with a single value type"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/schemas/any/"},(0,r.yg)("strong",{parentName:"a"},(0,r.yg)("inlineCode",{parentName:"strong"},"anyOf"))),": Contains a finite ",(0,r.yg)("strong",{parentName:"li"},"union")," of possible attributes")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"DynamoDB-Toolbox attribute types closely mirror the capabilities of DynamoDB. See the ",(0,r.yg)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes"},"DynamoDB documentation")," for more details.")),(0,r.yg)("p",null,"Note that some attribute types can be defined with other attributes. For instance, here's a list of string:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const nameAttr = string()\nconst namesAttr = list(nameAttr)\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Schemas are a standalone feature of DynamoDB-Toolbox (you can use them separately to ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/actions/parse"},"parse")," and ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/actions/format"},"format")," data for instance) and might even be moved into a separate library one day.")),(0,r.yg)("h2",{id:"fine-tuning-attributes"},"Fine-Tuning Attributes"),(0,r.yg)("p",null,"You can update attribute properties by using ",(0,r.yg)("strong",{parentName:"p"},"dedicated methods")," or by providing ",(0,r.yg)("strong",{parentName:"p"},"option objects"),"."),(0,r.yg)("p",null,"The former provides a ",(0,r.yg)("strong",{parentName:"p"},"slick devX")," with autocomplete and shorthands, while the latter theoretically requires ",(0,r.yg)("strong",{parentName:"p"},"less compute time and memory usage")," (although it should be negligible):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"// Using methods\nconst pokemonName = string().required('always')\n// Using options\nconst pokemonName = string({ required: 'always' })\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Attribute methods do not mute the origin attribute, but ",(0,r.yg)("strong",{parentName:"p"},"return a new attribute")," (hence the impact in memory usage).")),(0,r.yg)("p",null,"The output of an attribute method ",(0,r.yg)("strong",{parentName:"p"},"is also an attribute"),", so you can ",(0,r.yg)("strong",{parentName:"p"},"chain methods"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokeTypeAttr = string()\n  .required('always')\n  .enum('fire', 'water', 'grass')\n  .savedAs('t')\n")),(0,r.yg)("h2",{id:"warm-vs-frozen"},"Warm vs Frozen"),(0,r.yg)("p",null,"Prior to being wrapped in a ",(0,r.yg)("inlineCode",{parentName:"p"},"schema")," declaration, attributes are called ",(0,r.yg)("strong",{parentName:"p"},"warm:")," They are ",(0,r.yg)("strong",{parentName:"p"},"not validated")," (at run-time) and can be used to build other schemas. By inspecting their types, you can see that they are prefixed with ",(0,r.yg)("inlineCode",{parentName:"p"},"$"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const $nameSchema = string().required('always')\n// => $StringAttribute\n")),(0,r.yg)("p",null,"Once ",(0,r.yg)("strong",{parentName:"p"},"frozen"),", validation is applied and building methods are stripped:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const nameSchema = $nameSchema.freeze()\n// => StringAttribute\n\nnameSchema.required\n// => 'always'\nnameSchema.required('never')\n// => \u274c 'required' is not a function\n")),(0,r.yg)("p",null,"Wrapping attributes in a ",(0,r.yg)("inlineCode",{parentName:"p"},"schema")," declaration ",(0,r.yg)("strong",{parentName:"p"},"freezes them")," under the hood:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemonSchema = schema({ name: $nameSchema })\n// => Schema<{ name: StringAttribute }>\n\npokemonSchema.attributes.name.required\n// => 'always'\n")),(0,r.yg)("p",null,"The main takeaway is that ",(0,r.yg)("strong",{parentName:"p"},"warm schemas can be composed")," while ",(0,r.yg)("strong",{parentName:"p"},"frozen schemas cannot"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemonSchema = schema({\n  // \ud83d\udc4d No problemo\n  pokemonName: $nameSchema,\n  ...\n});\n\nconst pokedexSchema = schema({\n  // \u274c Not possible\n  pokemon: pokemonSchema,\n  ...\n});\n")),(0,r.yg)("h2",{id:"updating-schemas"},"Updating Schemas"),(0,r.yg)("p",null,"As we've just seen, once frozen, schemas ",(0,r.yg)("strong",{parentName:"p"},"cannot be updated"),"."),(0,r.yg)("p",null,"However, you can use them to build ",(0,r.yg)("strong",{parentName:"p"},"new schemas")," with the following methods:"),(0,r.yg)("h3",{id:"and"},(0,r.yg)("inlineCode",{parentName:"h3"},"and(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(attr: $NEW_ATTR | (Schema<OLD_ATTR> => $NEW_ATTR)) => Schema<OLD_ATTR & NEW_ATTR>"))),(0,r.yg)("p",null,"Allows ",(0,r.yg)("strong",{parentName:"p"},"extending")," a schema with ",(0,r.yg)("strong",{parentName:"p"},"new attributes"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const extendedSchema = baseSchema.and({\n  newAttribute: string(),\n  ...\n})\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"In case of naming conflicts, new attributes ",(0,r.yg)("strong",{parentName:"p"},"override")," the previous ones.")),(0,r.yg)("p",null,"The method also accepts functions that return a (warm) schema. In this case, the previous schema is provided as an argument (which is particularly useful for building ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/defaults-and-links/#links"},"Links"),"):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const extendedSchema = mySchema.and(prevSchema => ({\n  newAttribute: string(),\n  ...\n}))\n")),(0,r.yg)("h3",{id:"pick"},(0,r.yg)("inlineCode",{parentName:"h3"},"pick(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(...attrNames: ATTR_NAMES[]) => Schema<Pick<ATTR, ATTR_NAMES>>"))),(0,r.yg)("p",null,"Produces a ",(0,r.yg)("strong",{parentName:"p"},"new schema")," by keeping only certain ",(0,r.yg)("strong",{parentName:"p"},"attributes")," of the original schema:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const picked = pokemonSchema.pick('name', 'pokemonLevel')\n")),(0,r.yg)("p",null,"Due to the potential disruptive nature of this method on ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/defaults-and-links/#links"},"links"),", they are ",(0,r.yg)("strong",{parentName:"p"},"reset")," in the process:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const nameSchema = schema({\n  firstName: string(),\n  lastName: string(),\n  completeName: string().link(({ firstName, lastName }) =>\n    [firstName, lastName].join(' ')\n  )\n})\n\nconst picked = nameSchema.pick('lastName', 'completeName')\n\npicked.attributes.completeName.links.put\n// => undefined\n")),(0,r.yg)("h3",{id:"omit"},(0,r.yg)("inlineCode",{parentName:"h3"},"omit(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(...attrNames: ATTR_NAMES[]) => Schema<Omit<ATTR, ATTR_NAMES>>"))),(0,r.yg)("p",null,"Produces a ",(0,r.yg)("strong",{parentName:"p"},"new schema")," by removing certain ",(0,r.yg)("strong",{parentName:"p"},"attributes")," out of the original schema:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const omitted = pokemonSchema.omit('name', 'pokemonLevel')\n")),(0,r.yg)("p",null,"Due to the potential disruptive nature of this method on ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/defaults-and-links/#links"},"links"),", they are ",(0,r.yg)("strong",{parentName:"p"},"reset")," in the process:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const nameSchema = schema({\n  firstName: string(),\n  lastName: string(),\n  completeName: string().link(({ firstName, lastName }) =>\n    [firstName, lastName].join(' ')\n  )\n})\n\nconst omitted = nameSchema.omit('firstName')\n\nomitted.attributes.completeName.links.put\n// => undefined\n")))}c.isMDXComponent=!0}}]);