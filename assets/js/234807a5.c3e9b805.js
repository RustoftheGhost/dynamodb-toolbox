"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4319],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>p});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),y=d(t),c=i,p=y["".concat(s,".").concat(c)]||y[c]||m[c]||o;return t?a.createElement(p,l(l({ref:n},u),{},{components:t})):a.createElement(p,l({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=c;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[y]="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(96540),i=t(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,l),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>C});var a=t(58168),i=t(96540),o=t(20053),l=t(23104),r=t(56347),s=t(57485),d=t(31682),u=t(89466);function y(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function m(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??y(t);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function c(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=m(e),[l,r]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,d]=p({queryString:t,groupId:a}),[y,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Dv)(t);return[a,(0,i.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),h=(()=>{const e=s??y;return c({value:e,tabValues:o})?e:null})();(0,i.useLayoutEffect)((()=>{h&&r(h)}),[h]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),g(e)}),[d,g,o]),tabValues:o}}var h=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:y}=(0,l.a_)(),m=e=>{const n=e.currentTarget,t=u.indexOf(n),a=d[t].value;a!==r&&(y(n),s(a))},c=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n)},d.map((e=>{let{value:n,label:t,attributes:l}=e;return i.createElement("li",(0,a.A)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>u.push(e),onKeyDown:c,onClick:m},l,{className:(0,o.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":r===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=g(e);return i.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},i.createElement(b,(0,a.A)({},e,n)),i.createElement(v,(0,a.A)({},e,n)))}function C(e){const n=(0,h.A)();return i.createElement(N,(0,a.A)({key:String(n)},e))}},27544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>y});var a=t(58168),i=(t(96540),t(15680)),o=t(11470),l=t(19365);const r={sidebar_position:8,title:"Migration Guide"},s="Migration Guide",d={unversionedId:"v0/migration-guide/index",id:"v0/migration-guide/index",title:"Migration Guide",description:"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1.",source:"@site/docs/6-v0/9-migration-guide/index.md",sourceDirName:"6-v0/9-migration-guide",slug:"/v0/migration-guide/",permalink:"/docs/v0/migration-guide/",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Migration Guide"},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/docs/v0/contributing/"}},u={},y=[{value:"<code>Table</code>",id:"table",level:2},{value:"Primary Key",id:"primary-key",level:3},{value:"Indexes",id:"indexes",level:3},{value:"<code>entityField</code>",id:"entityfield",level:3},{value:"Misc.",id:"misc",level:3},{value:"<code>Entity</code>",id:"entity",level:2},{value:"Entity attribute",id:"entity-attribute",level:3},{value:"Timestamps attribute",id:"timestamps-attribute",level:3},{value:"Misc.",id:"misc-1",level:3},{value:"Attributes",id:"attributes",level:2},{value:"<code>map</code> &amp; <code>alias</code>",id:"map--alias",level:3},{value:"<code>partitionKey</code> &amp; <code>sortKey</code>",id:"partitionkey--sortkey",level:3},{value:"<code>saved</code>",id:"saved",level:3},{value:"<code>required</code>",id:"required",level:3},{value:"<code>default</code> &amp; <code>onUpdate</code>",id:"default--onupdate",level:3},{value:"<code>dependsOn</code>",id:"dependson",level:3},{value:"<code>transform</code> &amp; <code>format</code>",id:"transform--format",level:3},{value:"<code>coerce</code>",id:"coerce",level:3},{value:"Misc.",id:"misc-2",level:3},{value:"Commands",id:"commands",level:2},{value:"Table methods",id:"table-methods",level:3},{value:"Entity methods",id:"entity-methods",level:3},{value:"Condition Expressions",id:"condition-expressions",level:2},{value:"Projection Expressions",id:"projection-expressions",level:2}],m={toc:y},c="wrapper";function p(e){let{components:n,...t}=e;return(0,i.yg)(c,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"migration-guide"},"Migration Guide"),(0,i.yg)("p",null,"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1."),(0,i.yg)("p",null,"The good news is that the breaking changes ",(0,i.yg)("strong",{parentName:"p"},"only concern the API"),": You won't need any data migration \ud83e\udd73"),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Well, probably... as there are two exceptions:"),(0,i.yg)("ul",{parentName:"admonition"},(0,i.yg)("li",{parentName:"ul"},"If you de-activated the internal ",(0,i.yg)("a",{parentName:"li",href:"/docs/entities/internal-attributes/#entity"},(0,i.yg)("inlineCode",{parentName:"a"},"entity"))," attribute (by setting ",(0,i.yg)("inlineCode",{parentName:"li"},"entityField")," to ",(0,i.yg)("inlineCode",{parentName:"li"},"false"),"), it is now required, so must be re-introduced in the data"),(0,i.yg)("li",{parentName:"ul"},"If you used the ",(0,i.yg)("inlineCode",{parentName:"li"},"saved: false")," option on an attribute, there is no equivalent yet"))),(0,i.yg)("h2",{id:"table"},(0,i.yg)("inlineCode",{parentName:"h2"},"Table")),(0,i.yg)("h3",{id:"primary-key"},"Primary Key"),(0,i.yg)("p",null,"Primary Key attributes now have a ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," along with their ",(0,i.yg)("inlineCode",{parentName:"p"},"names"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"import { Table } from 'dynamodb-toolbox/table'\n\nconst MyTable = new Table({\n- partitionKey: 'pk',\n+ partitionKey: { name: 'pk', type: 'string' },\n- sortKey: 'sk',\n+ sortKey: { name: 'sk', type: 'string' },\n  ...\n})\n")),(0,i.yg)("h3",{id:"indexes"},"Indexes"),(0,i.yg)("p",null,"In the same way, index attributes now have a ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," property as well as an explicit ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," (",(0,i.yg)("inlineCode",{parentName:"p"},"global")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"local"),"):"),(0,i.yg)(o.A,{mdxType:"Tabs"},(0,i.yg)(l.A,{value:"gsi",label:"Global Index",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const MyTable = new Table({\n  indexes: {\n-   byTrainerId: { partitionKey: 'trainerId', sortKey: 'level' },\n+   byTrainerId: {\n+     type: 'global',\n+     partitionKey: { name: 'trainerId', type: 'string' },\n+     sortKey: { name: 'level', type: 'number' }\n+   },\n  },\n  ...\n})\n"))),(0,i.yg)(l.A,{value:"lsi",label:"Local index",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const MyTable = new Table({\n  indexes: {\n-   byLevel: { sortKey: 'level' },\n+   byLevel: {\n+     type: 'local',\n+     sortKey: { name: 'level', type: 'number' }\n+   },\n  },\n  ...\n})\n")))),(0,i.yg)("h3",{id:"entityfield"},(0,i.yg)("inlineCode",{parentName:"h3"},"entityField")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"entityField")," has been renamed to ",(0,i.yg)("inlineCode",{parentName:"p"},"entityAttributeSavedAs")," to be more closely aligned with the new ",(0,i.yg)("inlineCode",{parentName:"p"},"schema")," syntax."),(0,i.yg)("p",null,"It cannot be set to ",(0,i.yg)("inlineCode",{parentName:"p"},"false")," anymore (as it is required to infer correct formatting during ",(0,i.yg)("a",{parentName:"p",href:"/docs/tables/actions/scan/"},"Scans")," and ",(0,i.yg)("a",{parentName:"p",href:"/docs/tables/actions/query/"},"Queries"),"):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const MyTable = new Table({\n  ...,\n- entityField: '__entity__',\n+ entityAttributeSavedAs: '__entity__',\n})\n")),(0,i.yg)("h3",{id:"misc"},"Misc."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"autoExecute")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"autoParse")," options have been removed for the sake of simplicity: All commands have a ",(0,i.yg)("inlineCode",{parentName:"p"},".params()")," method to inspect the resulting query. This query can also be used directly to fetch the unformatted response."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"removeNullAttributes")," option has been removed. Attribute removals benefit from a dedicated ",(0,i.yg)("inlineCode",{parentName:"p"},"$remove")," symbol."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"alias")," option has also been removed. Feel free to ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/jeremydaly/dynamodb-toolbox/discussions/new/choose"},"open a discussion")," if you need it back."),(0,i.yg)("p",null,"Finally, table ",(0,i.yg)("inlineCode",{parentName:"p"},"attributes")," have not been re-implemented yet (but you can still share attribute schemas between entities, see the ",(0,i.yg)("a",{parentName:"p",href:"/docs/schemas/usage/"},"Schema documentation")," for more details)"),(0,i.yg)("h2",{id:"entity"},(0,i.yg)("inlineCode",{parentName:"h2"},"Entity")),(0,i.yg)("h3",{id:"entity-attribute"},"Entity attribute"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"typeAlias")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"typeHidden")," have respectively been renamed to ",(0,i.yg)("inlineCode",{parentName:"p"},"entityAttributeName")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"entityAttributeHidden"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- typeAlias: 'ent',\n- typeHidden: true,\n+ entityAttributeName: 'ent',\n+ entityAttributeHidden: true,\n})\n")),(0,i.yg)("h3",{id:"timestamps-attribute"},"Timestamps attribute"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"timestamps"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"created"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"modified"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"createdAlias"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"modifiedAlias")," options have been merged in a single ",(0,i.yg)("inlineCode",{parentName:"p"},"timestamps")," option that is either a ",(0,i.yg)("inlineCode",{parentName:"p"},"boolean")," or a configuration object."),(0,i.yg)("p",null,"Timestamp attributes can also be hidden and independently disabled:"),(0,i.yg)(o.A,{mdxType:"Tabs"},(0,i.yg)(l.A,{value:"fine-tuned",label:"Configured",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- timestamps: true,\n- created: '__created__',\n- createdAlias: 'creationDate',\n- modified: '__modified__',\n- modifiedAlias: 'modifiedDate',\n+ timestamps: {\n+   created: {\n+     savedAs: '__created__',\n+     name: 'creationDate'\n+   },\n+   modified: {\n+     savedAs: '__modified__',\n+     name: 'modifiedDate',\n+     hidden: true\n+   }\n+ }\n})\n"))),(0,i.yg)(l.A,{value:"disabled",label:"Enabled/Disabled",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- timestamps: false,\n+ timestamps: {\n+   created: true,\n+   modified: false\n+ }\n})\n")))),(0,i.yg)("h3",{id:"misc-1"},"Misc."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"autoExecute")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"autoParse")," options have been removed for the sake of simplicity: All commands have a ",(0,i.yg)("inlineCode",{parentName:"p"},".params()")," method to inspect the resulting query. This query can also be used directly to fetch the unformatted response."),(0,i.yg)("h2",{id:"attributes"},"Attributes"),(0,i.yg)("p",null,"The schema definition API (previous ",(0,i.yg)("inlineCode",{parentName:"p"},"attributes"),") is the part that received the most significant overhaul:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"+ import { schema } from 'dynamodb-toolbox/schema'\n+ import { string } from 'dynamodb-toolbox/attributes/string'\n\nconst PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainer: { type: 'string', map: '_t' },\n-   _p: { type: 'string', alias: 'pokemon' }\n-   ...,\n- },\n+ schema: schema({\n+   trainer: string().optional().savedAs('_t'),\n+   pokemon: string().optional().savedAs('_p'),\n+   ...\n+ }),\n})\n")),(0,i.yg)("p",null,"See the ",(0,i.yg)("a",{parentName:"p",href:"/docs/schemas/usage/"},"Schema documentation")," for a complete documentation on the new syntax."),(0,i.yg)("h3",{id:"map--alias"},(0,i.yg)("inlineCode",{parentName:"h3"},"map")," & ",(0,i.yg)("inlineCode",{parentName:"h3"},"alias")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"map")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"alias")," options have been simplified to a single ",(0,i.yg)("inlineCode",{parentName:"p"},"savedAs")," options:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainer: { type: 'string', required: true, map: '_t' },\n-   _p: { type: 'string', required: true, alias: 'pokemon' },\n-   ...,\n- },\n+ schema: schema({\n+   trainer: string().savedAs('_t'),\n+   pokemon: string().savedAs('_p'),\n+   ...,\n+ }),\n})\n")),(0,i.yg)("h3",{id:"partitionkey--sortkey"},(0,i.yg)("inlineCode",{parentName:"h3"},"partitionKey")," & ",(0,i.yg)("inlineCode",{parentName:"h3"},"sortKey")),(0,i.yg)("p",null,"Instead of ",(0,i.yg)("inlineCode",{parentName:"p"},"partitionKey")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"sortKey")," booleans that mapped attributes to the primary key attributes, the v1 exposes a ",(0,i.yg)("inlineCode",{parentName:"p"},"key")," boolean option to tag attributes as being part of the primary key."),(0,i.yg)("p",null,"The renaming can simply be done through the ",(0,i.yg)("inlineCode",{parentName:"p"},"savedAs")," option, which is more explicit:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainerId: { type: 'string', partitionKey: true },\n-   pokemonId: { type: 'string', sortKey: true },\n-   ...,\n- }\n+ schema: schema({\n+   trainerId: string().key().savedAs('pk'),\n+   pokemonId: string().key().savedAs('sk'),\n+   ...,\n+ })\n})\n")),(0,i.yg)("p",null,"The schema is validated against the ",(0,i.yg)("inlineCode",{parentName:"p"},"Table")," primary key. A ",(0,i.yg)("inlineCode",{parentName:"p"},"computeKey")," function is required if it doesn't match:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n  schema: schema({\n-   trainerId: string().key().savedAs('pk'),\n-   pokemonId: string().key().savedAs('sk'),\n+   trainerId: string().key(),\n+   pokemonId: string().key()\n    ...,\n  }),\n+ // \ud83d\ude4c Type-safe!\n+ computeKey: ({ trainerId, pokemonId }) => ({\n+   pk: trainerId,\n+   sk: pokemonId\n+ })\n})\n")),(0,i.yg)("h3",{id:"saved"},(0,i.yg)("inlineCode",{parentName:"h3"},"saved")),(0,i.yg)("p",null,"There are no equivalent to the ",(0,i.yg)("inlineCode",{parentName:"p"},"saved: false")," option for the moment. Feel free to ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/jeremydaly/dynamodb-toolbox/discussions/new/choose"},"open a discussion")," if you need it back."),(0,i.yg)("h3",{id:"required"},(0,i.yg)("inlineCode",{parentName:"h3"},"required")),(0,i.yg)("p",null,"Attributes are now ",(0,i.yg)("strong",{parentName:"p"},"required by default"),". You can tag them as optional via the ",(0,i.yg)("inlineCode",{parentName:"p"},'.required("never")')," method (or the equivalent ",(0,i.yg)("inlineCode",{parentName:"p"},".optional()")," shorthand):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   optional: { type: 'string' },\n-   required: { type: 'string', required: true },\n-   always: { type: 'string', required: 'always' },\n-   ...,\n- }\n+ schema: schema({\n+   optional: string().optional(),\n+   required: string(),\n+   always: string().required('always'),\n+   ...,\n+ })\n})\n")),(0,i.yg)("h3",{id:"default--onupdate"},(0,i.yg)("inlineCode",{parentName:"h3"},"default")," & ",(0,i.yg)("inlineCode",{parentName:"h3"},"onUpdate")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"default")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"onUpdate")," options have been reworked into the following options:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"putDefault"),": Applied on put actions (e.g. ",(0,i.yg)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,i.yg)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"updateDefault"),": Applied on update actions (e.g. ",(0,i.yg)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,i.yg)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"keyDefault"),": Overrides other defaults on key attributes (ignored otherwise)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"default"),": Shorthand that acts as ",(0,i.yg)("inlineCode",{parentName:"li"},"keyDefault")," on key attributes and ",(0,i.yg)("inlineCode",{parentName:"li"},"putDefault")," otherwise")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true, default: 1 },\n-   created: {\n-     type: 'string',\n-     required: true,\n-     default: () => new Date().toISOString()\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number().default(1),\n+   created: string().default(() => new Date().toISOString()),\n+   ...,\n+ })\n})\n")),(0,i.yg)("p",null,"If a default value is derived from other attributes, the v1 introduces a new notion called ",(0,i.yg)("inlineCode",{parentName:"p"},"links"),". See the ",(0,i.yg)("a",{parentName:"p",href:"/docs/schemas/defaults-and-links/"},"Defaults & Links section")," for more details:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"putLink"),": Applied on put actions (e.g. ",(0,i.yg)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,i.yg)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"updateLink"),": Applied on update actions (e.g. ",(0,i.yg)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,i.yg)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"keyLink"),": Overrides other links on key attributes (ignored otherwise)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"link"),": Shorthand that acts as ",(0,i.yg)("inlineCode",{parentName:"li"},"keyLink")," on key attributes and ",(0,i.yg)("inlineCode",{parentName:"li"},"putLink")," otherwise")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true },\n-   levelPlusOne: {\n-     type: 'number',\n-     required: true,\n-     default: ({ level }) => level + 1,\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number(),\n+   ...,\n+ }).and(prevSchema => ({\n+   levelPlusOne: number().link<typeof prevSchema>(\n+     ({ level }) => level + 1\n+   ),\n+ })),\n})\n")),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"In vanilla JS, ",(0,i.yg)("inlineCode",{parentName:"p"},"links")," can be used directly in the original schema.")),(0,i.yg)("p",null,"For example, we can make use of links to compute the primary key instead of using the ",(0,i.yg)("inlineCode",{parentName:"p"},"computeKey")," function:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- computeKey: ({ trainerId, pokemonId }) => ({\n-   pk: trainerId,\n-   sk: pokemonId\n- })\n  schema: schema({\n    trainerId: string().key(),\n    pokemonId: string().key()\n    ...,\n+ }).and(prevSchema => ({\n+   pk: string().key().link<typeof prevSchema>(\n+     ({ trainerId }) => trainerId\n+   ),\n+   sk: string().key().link<typeof prevSchema>(\n+     ({ pokemonId }) => pokemonId\n+   ),\n+ })),\n})\n")),(0,i.yg)("h3",{id:"dependson"},(0,i.yg)("inlineCode",{parentName:"h3"},"dependsOn")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"dependsOn")," option has been removed."),(0,i.yg)("p",null,"Note that links are applied ",(0,i.yg)("strong",{parentName:"p"},"after")," defaults, but links and defaults in themselves are computed in no guaranteed order."),(0,i.yg)("p",null,"You can avoid link dependencies by factorizing the underlying code:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true },\n-   levelPlusOne: {\n-     type: 'number',\n-     required: true,\n-     default: ({ level }) => level + 1,\n-   },\n-   levelPlusTwo: {\n-     type: 'number',\n-     required: true,\n-     default: ({ levelPlusOne }) => levelPlusOne + 1,\n-     dependsOn: ['levelPlusOne']\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number(),\n+   ...,\n+ }).and(prevSchema => ({\n+   levelPlusOne: number().link<typeof prevSchema>(\n+     ({ level }) => level + 1\n+   ),\n+   levelPlusTwo: number().link<typeof prevSchema>(\n+     ({ level }) => level + 2\n+   ),\n+ })),\n})\n")),(0,i.yg)("h3",{id:"transform--format"},(0,i.yg)("inlineCode",{parentName:"h3"},"transform")," & ",(0,i.yg)("inlineCode",{parentName:"h3"},"format")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"transform")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"format")," options have been merged into a single ",(0,i.yg)("inlineCode",{parentName:"p"},"transform")," option:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   status: {\n-     type: 'string',\n-     required: true,\n-     transform: input => `STATUS#${input}`,\n-     format: output => output.slice(7)\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   status: string().transform({\n+     parse: input => `STATUS#${input}`,\n+     format: output => output.slice(7)\n+   }),\n+   ...,\n+ })\n})\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"prefix")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"suffix")," options are now examples of transformers (see the ",(0,i.yg)("a",{parentName:"p",href:"/docs/schemas/transformers/usage"},"list of available transformers")," for more infos)."),(0,i.yg)("h3",{id:"coerce"},(0,i.yg)("inlineCode",{parentName:"h3"},"coerce")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"coerce")," option has not been re-implemented yet, but is on the roadmap."),(0,i.yg)("h3",{id:"misc-2"},"Misc."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"setType")," options are not useful and have been removed."),(0,i.yg)("p",null,"Using an array for composite keys is not supported anymore: Use ",(0,i.yg)("a",{parentName:"p",href:"#default--onupdate"},"links")," instead."),(0,i.yg)("h2",{id:"commands"},"Commands"),(0,i.yg)("p",null,"Instead of having dedicated methods, ",(0,i.yg)("inlineCode",{parentName:"p"},"Tables")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Entities")," now have a single ",(0,i.yg)("inlineCode",{parentName:"p"},".build")," method which acts as a gateway to perform ",(0,i.yg)("strong",{parentName:"p"},"actions"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-diff"},"+ import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\n- const { Item } = await PokemonEntity.get({ pokemonId })\n+ const { Item } = await PokemonEntity.build(GetItemCommand)\n+   .key({ pokemonId })\n+   .send()\n")),(0,i.yg)("p",null,"See the ",(0,i.yg)("a",{parentName:"p",href:"/docs/getting-started/usage/#methods-vs-actions"},"Getting Started section")," for more details on why we think this is a better syntax."),(0,i.yg)("p",null,"Adding ",(0,i.yg)("a",{parentName:"p",href:"/docs/v0/custom-parameters/"},"custom parameters and clauses")," is not possible anymore, but you can always use the ",(0,i.yg)("inlineCode",{parentName:"p"},".params()")," methods and build from there."),(0,i.yg)("h3",{id:"table-methods"},"Table methods"),(0,i.yg)("table",null,(0,i.yg)("thead",null,(0,i.yg)("tr",null,(0,i.yg)("th",null,"Cat."),(0,i.yg)("th",null,"Method"),(0,i.yg)("th",null,"Action"),(0,i.yg)("th",null,"Description"))),(0,i.yg)("tbody",null,(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.yg)("b",null,"Fetching")),(0,i.yg)("td",null,(0,i.yg)("code",null,".scan(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/tables/actions/scan"},(0,i.yg)("code",null,"ScanCommand"))),(0,i.yg)("td",null,"Performs a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html"},"Scan Operation")," on a ",(0,i.yg)("code",null,"Table"))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".query(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/tables/actions/query"},(0,i.yg)("code",null,"QueryCommand"))),(0,i.yg)("td",null,"Performs a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html"},"Query Operation")," on a ",(0,i.yg)("code",null,"Table"))),(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.yg)("b",null,"Batching")),(0,i.yg)("td",null,(0,i.yg)("code",null,".batchGet(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/tables/actions/batch-get"},(0,i.yg)("code",null,"BatchGetCommand"))),(0,i.yg)("td",null,"Groups one or several ",(0,i.yg)("a",{href:"/docs/entities/actions/batch-get"},(0,i.yg)("code",null,"BatchGetRequest"))," from the ",(0,i.yg)("code",null,"Table")," entities to execute a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html"},(0,i.yg)("code",null,"BatchGetItem")))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".batchWrite(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/tables/actions/batch-write"},(0,i.yg)("code",null,"BatchWriteCommand"))),(0,i.yg)("td",null,"Groups one or several ",(0,i.yg)("a",{href:"/docs/entities/actions/batch-put"},(0,i.yg)("code",null,"BatchPutRequest"))," and ",(0,i.yg)("a",{href:"/docs/entities/actions/batch-delete"},(0,i.yg)("code",null,"BatchDeleteRequest"))," from the ",(0,i.yg)("code",null,"Table")," entities to execute a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html"},"BatchWriteItem")," operation")),(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.yg)("b",null,"Transactions")),(0,i.yg)("td",null,(0,i.yg)("code",null,".transactGet(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/transact-get"},(0,i.yg)("code",null,"GetTransaction"))),(0,i.yg)("td",null,"Builds a transaction to get an entity item, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html"},"TransactGetItems operations"))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".transactWrite(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/transactions#transactwrite"},(0,i.yg)("code",null,"WriteTransaction"))),(0,i.yg)("td",null,"Builds a transaction to write entity items, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))))),(0,i.yg)("h3",{id:"entity-methods"},"Entity methods"),(0,i.yg)("table",null,(0,i.yg)("thead",null,(0,i.yg)("tr",null,(0,i.yg)("th",null,"Cat."),(0,i.yg)("th",null,"Method"),(0,i.yg)("th",null,"Action"),(0,i.yg)("th",null,"Description"))),(0,i.yg)("tbody",null,(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"4",align:"center",class:"vertical"},(0,i.yg)("b",null,"General")),(0,i.yg)("td",null,(0,i.yg)("code",null,".get(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/get-item"},(0,i.yg)("code",null,"GetItemCommand"))),(0,i.yg)("td",null,"Performs a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html"},"GetItem Operation")," on an entity item")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".put(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/put-item"},(0,i.yg)("code",null,"PutItemCommand"))),(0,i.yg)("td",null,"Performs a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html"},"PutItem Operation")," on an entity item")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".update(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/update-item"},(0,i.yg)("code",null,"UpdateItemCommand"))),(0,i.yg)("td",null,"Performs a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html"},"UpdateItem Operation")," on an entity item")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".delete(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/delete-item"},(0,i.yg)("code",null,"DeleteItemCommand"))),(0,i.yg)("td",null,"Performs a ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html"},"DeleteItem Operation")," on an entity item")),(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"3",align:"center",class:"vertical"},(0,i.yg)("b",null,"Batching")),(0,i.yg)("td",null,(0,i.yg)("code",null,".getBatch(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/batch-get"},(0,i.yg)("code",null,"BatchGetRequest"))),(0,i.yg)("td",null,"Builds a request to get an entity item, to be used within ",(0,i.yg)("a",{href:"/docs/tables/actions/batch-get"},(0,i.yg)("code",null,"BatchGetCommands")))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".putBatch(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/batch-put"},(0,i.yg)("code",null,"BatchPutRequest"))),(0,i.yg)("td",null,"Builds a request to put an entity item, to be used within ",(0,i.yg)("a",{href:"/docs/tables/actions/batch-write"},(0,i.yg)("code",null,"BatchWriteCommands")))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".deleteBatch(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/batch-delete"},(0,i.yg)("code",null,"BatchDeleteRequest"))),(0,i.yg)("td",null,"Builds a request to delete an entity item, to be used within ",(0,i.yg)("a",{href:"/docs/tables/actions/batch-write"},(0,i.yg)("code",null,"BatchWriteCommands")))),(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"5",align:"center",class:"vertical"},(0,i.yg)("b",null,"Transactions")),(0,i.yg)("td",null,(0,i.yg)("code",null,".getTransaction(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/transact-get"},(0,i.yg)("code",null,"GetTransaction"))),(0,i.yg)("td",null,"Builds a transaction to get an entity item, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html"},"TransactGetItems operations"))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".putTransaction(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/transact-put"},(0,i.yg)("code",null,"PutTransaction"))),(0,i.yg)("td",null,"Builds a transaction to put an entity item, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".updateTransaction(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/transact-update"},(0,i.yg)("code",null,"UpdateTransaction"))),(0,i.yg)("td",null,"Builds a transaction to update an entity item, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".deleteTransaction(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/transact-delete"},(0,i.yg)("code",null,"DeleteTransaction"))),(0,i.yg)("td",null,"Builds a transaction to delete an entity item, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".conditionCheck(...)")),(0,i.yg)("td",null,(0,i.yg)("a",{href:"/docs/entities/actions/condition-check"},(0,i.yg)("code",null,"ConditionCheck"))),(0,i.yg)("td",null,"Builds a condition to check against an entity item for the transaction to succeed, to be used within ",(0,i.yg)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.yg)("tr",null,(0,i.yg)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.yg)("b",null,"Fetching")),(0,i.yg)("td",null,(0,i.yg)("code",null,".scan(...)")),(0,i.yg)("td",null,"-"),(0,i.yg)("td",null,"Not implemented yet, use the Table ",(0,i.yg)("a",{href:"/docs/tables/actions/scan"},(0,i.yg)("code",null,"ScanCommand"))," instead")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".query(...)")),(0,i.yg)("td",null,"-"),(0,i.yg)("td",null,"Not implemented yet, use the Table ",(0,i.yg)("a",{href:"/docs/tables/actions/query"},(0,i.yg)("code",null,"QueryCommand"))," instead")))),(0,i.yg)("h2",{id:"condition-expressions"},"Condition Expressions"),(0,i.yg)("p",null,"Conditions benefit from ",(0,i.yg)("strong",{parentName:"p"},"improved typing"),", and ",(0,i.yg)("strong",{parentName:"p"},"clearer logical combinations"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},"const v0Condition = [\n  { attr: 'pokemonId', exists: false },\n  // \ud83d\udc47 'and' combination by default\n  { attr: 'level', lte: 99 },\n  [\n    // \ud83d\udc47 'or' in first condition means 'or' for group\n    { or: true, negate: true, ... }\n    ...,\n  ]\n]\n\nconst v1Condition = {\n  and: [\n    { attr: 'pokemonId', exists: false },\n    // \ud83d\ude4c \"lte\" is correcly typed\n    { attr: 'level', lte: 99 }\n    // \ud83d\ude4c You can nest logical combinations\n    {\n      or: [\n        { not: { ... } },\n        ...,\n      ]\n    },\n  ]\n}\n")),(0,i.yg)("h2",{id:"projection-expressions"},"Projection Expressions"),(0,i.yg)("p",null,"Projections expressions can now be deep:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},"const projection = {\n  attributes: [\n    'pokemonId',\n    'level',\n    'some.deep.map.value',\n    'some.array[0].element'\n  ]\n}\n")))}p.isMDXComponent=!0}}]);