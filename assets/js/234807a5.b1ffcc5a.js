"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1021],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=d(n),p=i,k=c["".concat(s,".").concat(p)]||c[p]||m[p]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),i=n(86010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,o),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(87462),i=n(67294),l=n(86010),o=n(12466),r=n(76775),s=n(91980),d=n(67392),u=n(50012);function m(e){return function(e){var t;return(null==(t=i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function c(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,r.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,i.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=c(e),[o,r]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,d]=k({queryString:n,groupId:a}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,i.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),f=(()=>{const e=s??m;return p({value:e,tabValues:l})?e:null})();(0,i.useLayoutEffect)((()=>{f&&r(f)}),[f]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);r(e),d(e),h(e)}),[d,h,l]),tabValues:l}}var f=n(72389);const y="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.o5)(),c=e=>{const t=e.currentTarget,n=u.indexOf(t),a=d[n].value;a!==r&&(m(t),s(a))},p=e=>{var t;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>u.push(e),onKeyDown:p,onClick:c},o,{className:(0,l.Z)("tabs__item",b,null==o?void 0:o.className,{"tabs__item--active":r===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=h(e);return i.createElement("div",{className:(0,l.Z)("tabs-container",y)},i.createElement(v,(0,a.Z)({},e,t)),i.createElement(g,(0,a.Z)({},e,t)))}function C(e){const t=(0,f.Z)();return i.createElement(N,(0,a.Z)({key:String(t)},e))}},15371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>m});var a=n(87462),i=(n(67294),n(3905)),l=n(74866),o=n(85162);const r={sidebar_position:8,title:"Migration Guide"},s="Migration Guide",d={unversionedId:"v0/migration-guide/index",id:"v0/migration-guide/index",title:"Migration Guide",description:"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1.",source:"@site/docs/6-v0/9-migration-guide/index.md",sourceDirName:"6-v0/9-migration-guide",slug:"/v0/migration-guide/",permalink:"/docs/v0/migration-guide/",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Migration Guide"},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/docs/v0/contributing/"}},u={},m=[{value:"<code>Table</code>",id:"table",level:2},{value:"Primary Key",id:"primary-key",level:3},{value:"Indexes",id:"indexes",level:3},{value:"<code>entityField</code>",id:"entityfield",level:3},{value:"Misc.",id:"misc",level:3},{value:"<code>Entity</code>",id:"entity",level:2},{value:"Entity attribute",id:"entity-attribute",level:3},{value:"Timestamps attribute",id:"timestamps-attribute",level:3},{value:"Misc.",id:"misc-1",level:3},{value:"Attributes",id:"attributes",level:2},{value:"<code>map</code> &amp; <code>alias</code>",id:"map--alias",level:3},{value:"<code>partitionKey</code> &amp; <code>sortKey</code>",id:"partitionkey--sortkey",level:3},{value:"<code>saved</code>",id:"saved",level:3},{value:"<code>required</code>",id:"required",level:3},{value:"<code>default</code> &amp; <code>onUpdate</code>",id:"default--onupdate",level:3},{value:"<code>dependsOn</code>",id:"dependson",level:3},{value:"<code>transform</code> &amp; <code>format</code>",id:"transform--format",level:3},{value:"<code>coerce</code>",id:"coerce",level:3},{value:"Misc.",id:"misc-2",level:3},{value:"Commands",id:"commands",level:2},{value:"Table methods",id:"table-methods",level:3},{value:"Entity methods",id:"entity-methods",level:3},{value:"Condition Expressions",id:"condition-expressions",level:2},{value:"Projection Expressions",id:"projection-expressions",level:2}],c={toc:m};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"migration-guide"},"Migration Guide"),(0,i.kt)("p",null,"If you used the v0 of DynamoDB-Toolbox, here are the changes you need to be aware of when migrating to the v1."),(0,i.kt)("p",null,"The good news is that the breaking changes ",(0,i.kt)("strong",{parentName:"p"},"only concern the API"),": You won't need any data migration \ud83e\udd73"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Well, probably... as there are two exceptions:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"If you de-activated the internal ",(0,i.kt)("a",{parentName:"li",href:"/docs/entities/internal-attributes/#entity"},(0,i.kt)("inlineCode",{parentName:"a"},"entity"))," attribute (by setting ",(0,i.kt)("inlineCode",{parentName:"li"},"entityField")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"), it is now required, so must be re-introduced in the data"),(0,i.kt)("li",{parentName:"ul"},"If you used the ",(0,i.kt)("inlineCode",{parentName:"li"},"saved: false")," option on an attribute, there is no equivalent yet"))),(0,i.kt)("h2",{id:"table"},(0,i.kt)("inlineCode",{parentName:"h2"},"Table")),(0,i.kt)("h3",{id:"primary-key"},"Primary Key"),(0,i.kt)("p",null,"Primary Key attributes now have a ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," along with their ",(0,i.kt)("inlineCode",{parentName:"p"},"names"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"import { Table } from 'dynamodb-toolbox/table'\n\nconst MyTable = new Table({\n- partitionKey: 'pk',\n+ partitionKey: { name: 'pk', type: 'string' },\n- sortKey: 'sk',\n+ sortKey: { name: 'sk', type: 'string' },\n  ...\n})\n")),(0,i.kt)("h3",{id:"indexes"},"Indexes"),(0,i.kt)("p",null,"In the same way, index attributes now have a ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," property as well as an explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," (",(0,i.kt)("inlineCode",{parentName:"p"},"global")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"local"),"):"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"gsi",label:"Global Index",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const MyTable = new Table({\n  indexes: {\n-   byTrainerId: { partitionKey: 'trainerId', sortKey: 'level' },\n+   byTrainerId: {\n+     type: 'global',\n+     partitionKey: { name: 'trainerId', type: 'string' },\n+     sortKey: { name: 'level', type: 'number' }\n+   },\n  },\n  ...\n})\n"))),(0,i.kt)(o.Z,{value:"lsi",label:"Local index",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const MyTable = new Table({\n  indexes: {\n-   byLevel: { sortKey: 'level' },\n+   byLevel: {\n+     type: 'local',\n+     sortKey: { name: 'level', type: 'number' }\n+   },\n  },\n  ...\n})\n")))),(0,i.kt)("h3",{id:"entityfield"},(0,i.kt)("inlineCode",{parentName:"h3"},"entityField")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"entityField")," has been renamed to ",(0,i.kt)("inlineCode",{parentName:"p"},"entityAttributeSavedAs")," to be more closely aligned with the new ",(0,i.kt)("inlineCode",{parentName:"p"},"schema")," syntax."),(0,i.kt)("p",null,"It cannot be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," anymore (as it is required to infer correct formatting during ",(0,i.kt)("a",{parentName:"p",href:"/docs/tables/actions/scan/"},"Scans")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/tables/actions/query/"},"Queries"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const MyTable = new Table({\n  ...,\n- entityField: '__entity__',\n+ entityAttributeSavedAs: '__entity__',\n})\n")),(0,i.kt)("h3",{id:"misc"},"Misc."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"autoExecute")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"autoParse")," options have been removed for the sake of simplicity: All commands have a ",(0,i.kt)("inlineCode",{parentName:"p"},".params()")," method to inspect the resulting query. This query can also be used directly to fetch the unformatted response."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"removeNullAttributes")," option has been removed. Attribute removals benefit from a dedicated ",(0,i.kt)("inlineCode",{parentName:"p"},"$remove")," symbol."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"alias")," option has also been removed. Feel free to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jeremydaly/dynamodb-toolbox/discussions/new/choose"},"open a discussion")," if you need it back."),(0,i.kt)("p",null,"Finally, table ",(0,i.kt)("inlineCode",{parentName:"p"},"attributes")," have not been re-implemented yet (but you can still share attribute schemas between entities, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/schemas/usage/"},"Schema documentation")," for more details)"),(0,i.kt)("h2",{id:"entity"},(0,i.kt)("inlineCode",{parentName:"h2"},"Entity")),(0,i.kt)("h3",{id:"entity-attribute"},"Entity attribute"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"typeAlias")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"typeHidden")," have respectively been renamed to ",(0,i.kt)("inlineCode",{parentName:"p"},"entityAttributeName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"entityAttributeHidden"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- typeAlias: 'ent',\n- typeHidden: true,\n+ entityAttributeName: 'ent',\n+ entityAttributeHidden: true,\n})\n")),(0,i.kt)("h3",{id:"timestamps-attribute"},"Timestamps attribute"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"created"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modified"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAlias"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiedAlias")," options have been merged in a single ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps")," option that is either a ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," or a configuration object."),(0,i.kt)("p",null,"Timestamp attributes can also be hidden and independently disabled:"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"fine-tuned",label:"Configured",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- timestamps: true,\n- created: '__created__',\n- createdAlias: 'creationDate',\n- modified: '__modified__',\n- modifiedAlias: 'modifiedDate',\n+ timestamps: {\n+   created: {\n+     savedAs: '__created__',\n+     name: 'creationDate'\n+   },\n+   modified: {\n+     savedAs: '__modified__',\n+     name: 'modifiedDate',\n+     hidden: true\n+   }\n+ }\n})\n"))),(0,i.kt)(o.Z,{value:"disabled",label:"Enabled/Disabled",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- timestamps: false,\n+ timestamps: {\n+   created: true,\n+   modified: false\n+ }\n})\n")))),(0,i.kt)("h3",{id:"misc-1"},"Misc."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"autoExecute")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"autoParse")," options have been removed for the sake of simplicity: All commands have a ",(0,i.kt)("inlineCode",{parentName:"p"},".params()")," method to inspect the resulting query. This query can also be used directly to fetch the unformatted response."),(0,i.kt)("h2",{id:"attributes"},"Attributes"),(0,i.kt)("p",null,"The schema definition API (previous ",(0,i.kt)("inlineCode",{parentName:"p"},"attributes"),") is the part that received the most significant overhaul:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"+ import { schema } from 'dynamodb-toolbox/schema'\n+ import { string } from 'dynamodb-toolbox/attributes/string'\n\nconst PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainer: { type: 'string', map: '_t' },\n-   _p: { type: 'string', alias: 'pokemon' }\n-   ...,\n- },\n+ schema: schema({\n+   trainer: string().optional().savedAs('_t'),\n+   pokemon: string().optional().savedAs('_p'),\n+   ...\n+ }),\n})\n")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/schemas/usage/"},"Schema documentation")," for a complete documentation on the new syntax."),(0,i.kt)("h3",{id:"map--alias"},(0,i.kt)("inlineCode",{parentName:"h3"},"map")," & ",(0,i.kt)("inlineCode",{parentName:"h3"},"alias")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"alias")," options have been simplified to a single ",(0,i.kt)("inlineCode",{parentName:"p"},"savedAs")," options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainer: { type: 'string', required: true, map: '_t' },\n-   _p: { type: 'string', required: true, alias: 'pokemon' },\n-   ...,\n- },\n+ schema: schema({\n+   trainer: string().savedAs('_t'),\n+   pokemon: string().savedAs('_p'),\n+   ...,\n+ }),\n})\n")),(0,i.kt)("h3",{id:"partitionkey--sortkey"},(0,i.kt)("inlineCode",{parentName:"h3"},"partitionKey")," & ",(0,i.kt)("inlineCode",{parentName:"h3"},"sortKey")),(0,i.kt)("p",null,"Instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"partitionKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sortKey")," booleans that mapped attributes to the primary key attributes, the v1 exposes a ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," boolean option to tag attributes as being part of the primary key."),(0,i.kt)("p",null,"The renaming can simply be done through the ",(0,i.kt)("inlineCode",{parentName:"p"},"savedAs")," option, which is more explicit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   trainerId: { type: 'string', partitionKey: true },\n-   pokemonId: { type: 'string', sortKey: true },\n-   ...,\n- }\n+ schema: schema({\n+   trainerId: string().key().savedAs('pk'),\n+   pokemonId: string().key().savedAs('sk'),\n+   ...,\n+ })\n})\n")),(0,i.kt)("p",null,"The schema is validated against the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," primary key. A ",(0,i.kt)("inlineCode",{parentName:"p"},"computeKey")," function is required if it doesn't match:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n  schema: schema({\n-   trainerId: string().key().savedAs('pk'),\n-   pokemonId: string().key().savedAs('sk'),\n+   trainerId: string().key(),\n+   pokemonId: string().key()\n    ...,\n  }),\n+ // \ud83d\ude4c Type-safe!\n+ computeKey: ({ trainerId, pokemonId }) => ({\n+   pk: trainerId,\n+   sk: pokemonId\n+ })\n})\n")),(0,i.kt)("h3",{id:"saved"},(0,i.kt)("inlineCode",{parentName:"h3"},"saved")),(0,i.kt)("p",null,"There are no equivalent to the ",(0,i.kt)("inlineCode",{parentName:"p"},"saved: false")," option for the moment. Feel free to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jeremydaly/dynamodb-toolbox/discussions/new/choose"},"open a discussion")," if you need it back."),(0,i.kt)("h3",{id:"required"},(0,i.kt)("inlineCode",{parentName:"h3"},"required")),(0,i.kt)("p",null,"Attributes are now ",(0,i.kt)("strong",{parentName:"p"},"required by default"),". You can tag them as optional via the ",(0,i.kt)("inlineCode",{parentName:"p"},'.required("never")')," method (or the equivalent ",(0,i.kt)("inlineCode",{parentName:"p"},".optional()")," shorthand):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   optional: { type: 'string' },\n-   required: { type: 'string', required: true },\n-   always: { type: 'string', required: 'always' },\n-   ...,\n- }\n+ schema: schema({\n+   optional: string().optional(),\n+   required: string(),\n+   always: string().required('always'),\n+   ...,\n+ })\n})\n")),(0,i.kt)("h3",{id:"default--onupdate"},(0,i.kt)("inlineCode",{parentName:"h3"},"default")," & ",(0,i.kt)("inlineCode",{parentName:"h3"},"onUpdate")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onUpdate")," options have been reworked into the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"putDefault"),": Applied on put actions (e.g. ",(0,i.kt)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,i.kt)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updateDefault"),": Applied on update actions (e.g. ",(0,i.kt)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,i.kt)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keyDefault"),": Overrides other defaults on key attributes (ignored otherwise)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default"),": Shorthand that acts as ",(0,i.kt)("inlineCode",{parentName:"li"},"keyDefault")," on key attributes and ",(0,i.kt)("inlineCode",{parentName:"li"},"putDefault")," otherwise")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true, default: 1 },\n-   created: {\n-     type: 'string',\n-     required: true,\n-     default: () => new Date().toISOString()\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number().default(1),\n+   created: string().default(() => new Date().toISOString()),\n+   ...,\n+ })\n})\n")),(0,i.kt)("p",null,"If a default value is derived from other attributes, the v1 introduces a new notion called ",(0,i.kt)("inlineCode",{parentName:"p"},"links"),". See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/schemas/defaults-and-links/"},"Defaults & Links section")," for more details:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"putLink"),": Applied on put actions (e.g. ",(0,i.kt)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,i.kt)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updateLink"),": Applied on update actions (e.g. ",(0,i.kt)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,i.kt)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keyLink"),": Overrides other links on key attributes (ignored otherwise)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"link"),": Shorthand that acts as ",(0,i.kt)("inlineCode",{parentName:"li"},"keyLink")," on key attributes and ",(0,i.kt)("inlineCode",{parentName:"li"},"putLink")," otherwise")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true },\n-   levelPlusOne: {\n-     type: 'number',\n-     required: true,\n-     default: ({ level }) => level + 1,\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number(),\n+   ...,\n+ }).and(prevSchema => ({\n+   levelPlusOne: number().link<typeof prevSchema>(\n+     ({ level }) => level + 1\n+   ),\n+ })),\n})\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In vanilla JS, ",(0,i.kt)("inlineCode",{parentName:"p"},"links")," can be used directly in the original schema.")),(0,i.kt)("p",null,"For example, we can make use of links to compute the primary key instead of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"computeKey")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- computeKey: ({ trainerId, pokemonId }) => ({\n-   pk: trainerId,\n-   sk: pokemonId\n- })\n  schema: schema({\n    trainerId: string().key(),\n    pokemonId: string().key()\n    ...,\n+ }).and(prevSchema => ({\n+   pk: string().key().link<typeof prevSchema>(\n+     ({ trainerId }) => trainerId\n+   ),\n+   sk: string().key().link<typeof prevSchema>(\n+     ({ pokemonId }) => pokemonId\n+   ),\n+ })),\n})\n")),(0,i.kt)("h3",{id:"dependson"},(0,i.kt)("inlineCode",{parentName:"h3"},"dependsOn")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dependsOn")," option has been removed."),(0,i.kt)("p",null,"Note that links are applied ",(0,i.kt)("strong",{parentName:"p"},"after")," defaults, but links and defaults in themselves are computed in no guaranteed order."),(0,i.kt)("p",null,"You can avoid link dependencies by factorizing the underlying code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   level: { type: 'number', required: true },\n-   levelPlusOne: {\n-     type: 'number',\n-     required: true,\n-     default: ({ level }) => level + 1,\n-   },\n-   levelPlusTwo: {\n-     type: 'number',\n-     required: true,\n-     default: ({ levelPlusOne }) => levelPlusOne + 1,\n-     dependsOn: ['levelPlusOne']\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   level: number(),\n+   ...,\n+ }).and(prevSchema => ({\n+   levelPlusOne: number().link<typeof prevSchema>(\n+     ({ level }) => level + 1\n+   ),\n+   levelPlusTwo: number().link<typeof prevSchema>(\n+     ({ level }) => level + 2\n+   ),\n+ })),\n})\n")),(0,i.kt)("h3",{id:"transform--format"},(0,i.kt)("inlineCode",{parentName:"h3"},"transform")," & ",(0,i.kt)("inlineCode",{parentName:"h3"},"format")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"format")," options have been merged into a single ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"const PokemonEntity = new Entity({\n  ...,\n- attributes: {\n-   status: {\n-     type: 'string',\n-     required: true,\n-     transform: input => `STATUS#${input}`,\n-     format: output => output.slice(7)\n-   },\n-   ...,\n- }\n+ schema: schema({\n+   status: string().transform({\n+     parse: input => `STATUS#${input}`,\n+     format: output => output.slice(7)\n+   }),\n+   ...,\n+ })\n})\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"suffix")," options are now examples of transformers (see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/schemas/transformers/usage"},"list of available transformers")," for more infos)."),(0,i.kt)("h3",{id:"coerce"},(0,i.kt)("inlineCode",{parentName:"h3"},"coerce")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"coerce")," option has not been re-implemented yet, but is on the roadmap."),(0,i.kt)("h3",{id:"misc-2"},"Misc."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"setType")," options are not useful and have been removed."),(0,i.kt)("p",null,"Using an array for composite keys is not supported anymore: Use ",(0,i.kt)("a",{parentName:"p",href:"#default--onupdate"},"links")," instead."),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("p",null,"Instead of having dedicated methods, ",(0,i.kt)("inlineCode",{parentName:"p"},"Tables")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Entities")," now have a single ",(0,i.kt)("inlineCode",{parentName:"p"},".build")," method which acts as a gateway to perform ",(0,i.kt)("strong",{parentName:"p"},"actions"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"+ import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\n- const { Item } = await PokemonEntity.get({ pokemonId })\n+ const { Item } = await PokemonEntity.build(GetItemCommand)\n+   .key({ pokemonId })\n+   .send()\n")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/usage/#methods-vs-actions"},"Getting Started section")," for more details on why we think this is a better syntax."),(0,i.kt)("p",null,"Adding ",(0,i.kt)("a",{parentName:"p",href:"/docs/v0/custom-parameters/"},"custom parameters and clauses")," is not possible anymore, but you can always use the ",(0,i.kt)("inlineCode",{parentName:"p"},".params()")," methods and build from there."),(0,i.kt)("h3",{id:"table-methods"},"Table methods"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Cat."),(0,i.kt)("th",null,"Method"),(0,i.kt)("th",null,"Action"),(0,i.kt)("th",null,"Description"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.kt)("b",null,"Fetching")),(0,i.kt)("td",null,(0,i.kt)("code",null,".scan(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/tables/actions/scan"},(0,i.kt)("code",null,"ScanCommand"))),(0,i.kt)("td",null,"Performs a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html"},"Scan Operation")," on a ",(0,i.kt)("code",null,"Table"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".query(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/tables/actions/query"},(0,i.kt)("code",null,"QueryCommand"))),(0,i.kt)("td",null,"Performs a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html"},"Query Operation")," on a ",(0,i.kt)("code",null,"Table"))),(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.kt)("b",null,"Batching")),(0,i.kt)("td",null,(0,i.kt)("code",null,".batchGet(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/tables/actions/batch-get"},(0,i.kt)("code",null,"BatchGetCommand"))),(0,i.kt)("td",null,"Groups one or several ",(0,i.kt)("a",{href:"/docs/entities/actions/batch-get"},(0,i.kt)("code",null,"BatchGetRequest"))," from the ",(0,i.kt)("code",null,"Table")," entities to execute a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html"},(0,i.kt)("code",null,"BatchGetItem")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".batchWrite(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/tables/actions/batch-write"},(0,i.kt)("code",null,"BatchWriteCommand"))),(0,i.kt)("td",null,"Groups one or several ",(0,i.kt)("a",{href:"/docs/entities/actions/batch-put"},(0,i.kt)("code",null,"BatchPutRequest"))," and ",(0,i.kt)("a",{href:"/docs/entities/actions/batch-delete"},(0,i.kt)("code",null,"BatchDeleteRequest"))," from the ",(0,i.kt)("code",null,"Table")," entities to execute a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html"},"BatchWriteItem")," operation")),(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.kt)("b",null,"Transactions")),(0,i.kt)("td",null,(0,i.kt)("code",null,".transactGet(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/transact-get"},(0,i.kt)("code",null,"GetTransaction"))),(0,i.kt)("td",null,"Builds a transaction to get an entity item, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html"},"TransactGetItems operations"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".transactWrite(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/transactions#transactwrite"},(0,i.kt)("code",null,"WriteTransaction"))),(0,i.kt)("td",null,"Builds a transaction to write entity items, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))))),(0,i.kt)("h3",{id:"entity-methods"},"Entity methods"),(0,i.kt)("table",null,(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Cat."),(0,i.kt)("th",null,"Method"),(0,i.kt)("th",null,"Action"),(0,i.kt)("th",null,"Description"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"4",align:"center",class:"vertical"},(0,i.kt)("b",null,"General")),(0,i.kt)("td",null,(0,i.kt)("code",null,".get(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/get-item"},(0,i.kt)("code",null,"GetItemCommand"))),(0,i.kt)("td",null,"Performs a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html"},"GetItem Operation")," on an entity item")),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".put(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/put-item"},(0,i.kt)("code",null,"PutItemCommand"))),(0,i.kt)("td",null,"Performs a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html"},"PutItem Operation")," on an entity item")),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".update(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/update-item"},(0,i.kt)("code",null,"UpdateItemCommand"))),(0,i.kt)("td",null,"Performs a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html"},"UpdateItem Operation")," on an entity item")),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".delete(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/delete-item"},(0,i.kt)("code",null,"DeleteItemCommand"))),(0,i.kt)("td",null,"Performs a ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html"},"DeleteItem Operation")," on an entity item")),(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"3",align:"center",class:"vertical"},(0,i.kt)("b",null,"Batching")),(0,i.kt)("td",null,(0,i.kt)("code",null,".getBatch(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/batch-get"},(0,i.kt)("code",null,"BatchGetRequest"))),(0,i.kt)("td",null,"Builds a request to get an entity item, to be used within ",(0,i.kt)("a",{href:"/docs/tables/actions/batch-get"},(0,i.kt)("code",null,"BatchGetCommands")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".putBatch(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/batch-put"},(0,i.kt)("code",null,"BatchPutRequest"))),(0,i.kt)("td",null,"Builds a request to put an entity item, to be used within ",(0,i.kt)("a",{href:"/docs/tables/actions/batch-write"},(0,i.kt)("code",null,"BatchWriteCommands")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".deleteBatch(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/batch-delete"},(0,i.kt)("code",null,"BatchDeleteRequest"))),(0,i.kt)("td",null,"Builds a request to delete an entity item, to be used within ",(0,i.kt)("a",{href:"/docs/tables/actions/batch-write"},(0,i.kt)("code",null,"BatchWriteCommands")))),(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"5",align:"center",class:"vertical"},(0,i.kt)("b",null,"Transactions")),(0,i.kt)("td",null,(0,i.kt)("code",null,".getTransaction(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/transact-get"},(0,i.kt)("code",null,"GetTransaction"))),(0,i.kt)("td",null,"Builds a transaction to get an entity item, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html"},"TransactGetItems operations"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".putTransaction(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/transact-put"},(0,i.kt)("code",null,"PutTransaction"))),(0,i.kt)("td",null,"Builds a transaction to put an entity item, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".updateTransaction(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/transact-update"},(0,i.kt)("code",null,"UpdateTransaction"))),(0,i.kt)("td",null,"Builds a transaction to update an entity item, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".deleteTransaction(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/transact-delete"},(0,i.kt)("code",null,"DeleteTransaction"))),(0,i.kt)("td",null,"Builds a transaction to delete an entity item, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".conditionCheck(...)")),(0,i.kt)("td",null,(0,i.kt)("a",{href:"/docs/entities/actions/condition-check"},(0,i.kt)("code",null,"ConditionCheck"))),(0,i.kt)("td",null,"Builds a condition to check against an entity item for the transaction to succeed, to be used within ",(0,i.kt)("a",{href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html"},"TransactWriteItems operations"))),(0,i.kt)("tr",null,(0,i.kt)("td",{rowSpan:"2",align:"center",class:"vertical"},(0,i.kt)("b",null,"Fetching")),(0,i.kt)("td",null,(0,i.kt)("code",null,".scan(...)")),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"Not implemented yet, use the Table ",(0,i.kt)("a",{href:"/docs/tables/actions/scan"},(0,i.kt)("code",null,"ScanCommand"))," instead")),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,".query(...)")),(0,i.kt)("td",null,"-"),(0,i.kt)("td",null,"Not implemented yet, use the Table ",(0,i.kt)("a",{href:"/docs/tables/actions/query"},(0,i.kt)("code",null,"QueryCommand"))," instead")))),(0,i.kt)("h2",{id:"condition-expressions"},"Condition Expressions"),(0,i.kt)("p",null,"Conditions benefit from ",(0,i.kt)("strong",{parentName:"p"},"improved typing"),", and ",(0,i.kt)("strong",{parentName:"p"},"clearer logical combinations"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const v0Condition = [\n  { attr: 'pokemonId', exists: false },\n  // \ud83d\udc47 'and' combination by default\n  { attr: 'level', lte: 99 },\n  [\n    // \ud83d\udc47 'or' in first condition means 'or' for group\n    { or: true, negate: true, ... }\n    ...,\n  ]\n]\n\nconst v1Condition = {\n  and: [\n    { attr: 'pokemonId', exists: false },\n    // \ud83d\ude4c \"lte\" is correcly typed\n    { attr: 'level', lte: 99 }\n    // \ud83d\ude4c You can nest logical combinations\n    {\n      or: [\n        { not: { ... } },\n        ...,\n      ]\n    },\n  ]\n}\n")),(0,i.kt)("h2",{id:"projection-expressions"},"Projection Expressions"),(0,i.kt)("p",null,"Projections expressions can now be nested:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const projection = {\n  attributes: [\n    'pokemonId',\n    'level',\n    'some.nested.map.value',\n    'some.array[0].element'\n  ]\n}\n")))}p.isMDXComponent=!0}}]);