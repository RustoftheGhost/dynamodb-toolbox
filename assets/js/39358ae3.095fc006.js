"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3082],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(y,i(i({ref:t},u),{},{components:n})):a.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>i});var a=n(96540),r=n(20053);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>E});var a=n(58168),r=n(96540),o=n(20053),i=n(23104),l=n(72681),s=n(57485),p=n(31682),u=n(89466);function d(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,p]=y({queryString:n,groupId:a}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=s??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var b=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==l&&(d(t),s(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:c},i,{className:(0,o.A)("tabs__item",f.tabItem,null==i?void 0:i.className,{"tabs__item--active":l===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},r.createElement(h,(0,a.A)({},e,t)),r.createElement(N,(0,a.A)({},e,t)))}function E(e){const t=(0,b.A)();return r.createElement(v,(0,a.A)({key:String(t)},e))}},29583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(58168),r=(n(96540),n(15680)),o=n(11470),i=n(19365);const l={title:"Parse",sidebar_custom_props:{sidebarActionType:"util"}},s="EntityParser",p={unversionedId:"entities/actions/parse/index",id:"entities/actions/parse/index",title:"Parse",description:"Given an input of any type and a mode, validates that it respects the schema of the Entity and applies transformations:",source:"@site/docs/3-entities/3-actions/17-parse/index.md",sourceDirName:"3-entities/3-actions/17-parse",slug:"/entities/actions/parse/",permalink:"/docs/entities/actions/parse/",draft:!1,tags:[],version:"current",frontMatter:{title:"Parse",sidebar_custom_props:{sidebarActionType:"util"}},sidebar:"tutorialSidebar",previous:{title:"Utilities",permalink:"/docs/entities/actions/utilities/"},next:{title:"ParseCondition",permalink:"/docs/entities/actions/parse-condition/"}},u={},d=[{value:"Methods",id:"methods",level:2},{value:"<code>parse(...)</code>",id:"parse",level:3},{value:"<code>reparse(...)</code>",id:"reparse",level:3}],c={toc:d},m="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"entityparser"},"EntityParser"),(0,r.yg)("p",null,"Given an input of any type and a mode, validates that it respects the schema of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," and applies transformations:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { EntityParser } from 'dynamodb-toolbox/entity/actions/parse'\n\nconst {\n  // \ud83d\udc47 Parsed item + Primary key\n  item,\n  key\n} = PokemonEntity.build(EntityParser).parse(input)\n")),(0,r.yg)("p",null,"The default mode is ",(0,r.yg)("inlineCode",{parentName:"p"},"put"),", but you can switch it to ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"key")," if needed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsed = PokemonEntity.build(EntityParser).parse(\n  keyInput,\n  // Additional options\n  { mode: 'key' }\n)\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"This action is mostly a ",(0,r.yg)("strong",{parentName:"p"},"wrapper around the ",(0,r.yg)("a",{parentName:"strong",href:"/docs/schemas/actions/parse"},(0,r.yg)("inlineCode",{parentName:"a"},"SchemaParser"))," action"),", so we highly recommend you read its dedicated documentation first.")),(0,r.yg)("p",null,"Note that:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Additional fields are omitted, but inputs are not mutated"),(0,r.yg)("li",{parentName:"ul"},"The mode ",(0,r.yg)("inlineCode",{parentName:"li"},"defaults")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"links")," are applied"),(0,r.yg)("li",{parentName:"ul"},"Transformations (i.e. ",(0,r.yg)("inlineCode",{parentName:"li"},"savedAs")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"transforms"),") are applied")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Table")," primary key is derived from the validated input by applying ",(0,r.yg)("a",{parentName:"p",href:"/docs/entities/usage/#computekey"},(0,r.yg)("inlineCode",{parentName:"a"},"computeKey"))," if it exists, or extracted from the transformed input otherwise."),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"parse"},(0,r.yg)("inlineCode",{parentName:"h3"},"parse(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: unknown, options?: ParsingOptions) => ParsingOutput<ENTITY>"))),(0,r.yg)("p",null,"Parses an input of any type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsed = PokemonEntity.build(EntityParser).parse(input)\n")),(0,r.yg)("p",null,"You can provide ",(0,r.yg)("strong",{parentName:"p"},"parsing options")," as a second argument. Available options:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"mode")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"key")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"update")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put")),(0,r.yg)("td",{parentName:"tr",align:null},"The mode of the parsing: Impacts which ",(0,r.yg)("inlineCode",{parentName:"td"},"default")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"link")," should be used, as well as requiredness during validation.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"parseExtension")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("em",{parentName:"td"},"(internal)")),(0,r.yg)("td",{parentName:"tr",align:"center"},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Dependency injection required to parse extended syntax (",(0,r.yg)("inlineCode",{parentName:"td"},"$get"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"$add")," etc.) when using the ",(0,r.yg)("inlineCode",{parentName:"td"},"update")," mode (check example below).")))),(0,r.yg)("admonition",{title:"Examples",type:"note"},(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"put",label:"Put",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemon = {\n  pokemonId: 'pikachu1',\n  name: 'Pikachu',\n  types: ['Electric'],\n  ...\n}\n\nconst parsed = PokemonEntity.build(EntityParser).parse(pokemon)\n"))),(0,r.yg)(i.A,{value:"key",label:"Key",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { key } = PokemonEntity.build(EntityParser).parse(\n  { pokemonId: 'pikachu1' },\n  { mode: 'key' }\n)\n"))),(0,r.yg)(i.A,{value:"update",label:"Update",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { item } = PokemonEntity.build(EntityParser).parse(\n  { pokemonId: 'bulbasaur1', customName: 'PlantyDino' },\n  { mode: 'update' }\n)\n"))),(0,r.yg)(i.A,{value:"update-extended",label:"Update (extended)",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import {\n  $add,\n  parseUpdateExtension\n} from 'dynamodb-toolbox/entity/actions/update'\n\nconst { item } = PokemonEntity.build(EntityParser).parse(\n  // \ud83d\udc47 `$add` is an extension, so `parseExtension`  is needed\n  { pokemonId: 'pikachu1', customName: $add(1) },\n  { mode: 'update', parseExtension: parseUpdateExtension }\n)\n"))))),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"ParsedItem")," type to explicitly type an object as a parsing output object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { ParsedItem } from 'dynamodb-toolbox/entity/actions/parse'\n\nconst parsedItem: ParsedItem<\n  typeof PokemonEntity,\n  // \ud83d\udc47 Optional options\n  { mode: 'key' }\n  // \u274c Throws a type error\n> = { invalid: 'input' }\n")),(0,r.yg)("p",null,"Note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"SavedItem")," type is actually based on it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { SavedItem } from 'dynamodb-toolbox/entity/actions/parse'\n\nconst savedItem: SavedItem<typeof PokemonEntity> = {\n  pokemonId: '123'\n  ...\n}\n")),(0,r.yg)("h3",{id:"reparse"},(0,r.yg)("inlineCode",{parentName:"h3"},"reparse(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: ParserInput<ENTITY>, options?: ParsingOptions) => ParsingOutput<ENTITY>"))),(0,r.yg)("p",null,"Similar to ",(0,r.yg)("a",{parentName:"p",href:"#parse"},(0,r.yg)("inlineCode",{parentName:"a"},".parse")),", but with the input correctly typed (taking the mode into account) instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"unknown"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"PokemonEntity.build(EntityParser)\n  // \u274c Throws a type error\n  .reparse({ invalid: 'input' })\n")),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"EntityParserInput")," type to explicitly type an object as a parsing input object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { EntityParserInput } from 'dynamodb-toolbox/entity/actions/parse'\n\nconst input: EntityParserInput<\n  typeof PokemonEntity,\n  // \ud83d\udc47 Optional options\n  { mode: 'key' }\n  // \u274c Throws a type error\n> = { invalid: 'input' }\n")),(0,r.yg)("p",null,"Note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyInput")," type is actually based on it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { KeyInput } from 'dynamodb-toolbox/entity/actions/parse'\n\nconst keyInput: KeyInput<typeof PokemonEntity> = {\n  pokemonId: 'pikachu1'\n}\n")))}y.isMDXComponent=!0}}]);