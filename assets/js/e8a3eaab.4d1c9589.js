"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2099],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>u});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=l(n),y=o,u=c["".concat(p,".").concat(y)]||c[y]||d[y]||r;return n?a.createElement(u,s(s({ref:t},m),{},{components:n})):a.createElement(u,s({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},5479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(58168),o=(n(96540),n(15680));const r={title:"ParsePaths",sidebar_custom_props:{sidebarActionType:"util"}},s="PathParser",i={unversionedId:"entities/actions/parse-paths/index",id:"entities/actions/parse-paths/index",title:"ParsePaths",description:"Builds a Projection Expression that can be used to filter the returned attributes of a read operation like a GetItem, Query or Scan:",source:"@site/docs/3-entities/3-actions/18-parse-paths/index.md",sourceDirName:"3-entities/3-actions/18-parse-paths",slug:"/entities/actions/parse-paths/",permalink:"/docs/entities/actions/parse-paths/",draft:!1,tags:[],version:"current",frontMatter:{title:"ParsePaths",sidebar_custom_props:{sidebarActionType:"util"}},sidebar:"tutorialSidebar",previous:{title:"ParseCondition",permalink:"/docs/entities/actions/parse-condition/"},next:{title:"Format",permalink:"/docs/entities/actions/format/"}},p={},l=[{value:"Methods",id:"methods",level:2},{value:"<code>parse(...)</code>",id:"parse",level:3},{value:"<code>toCommandOptions()</code>",id:"tocommandoptions",level:3},{value:"<code>setId(...)</code>",id:"setid",level:3},{value:"Paths",id:"paths",level:2}],m={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(c,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"pathparser"},"PathParser"),(0,o.yg)("p",null,"Builds a ",(0,o.yg)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ProjectionExpressions.html"},"Projection Expression")," that can be used to filter the returned attributes of a read operation like a ",(0,o.yg)("a",{parentName:"p",href:"/docs/entities/actions/get-item/"},"GetItem"),", ",(0,o.yg)("a",{parentName:"p",href:"/docs/tables/actions/query"},"Query")," or ",(0,o.yg)("a",{parentName:"p",href:"/docs/tables/actions/scan"},"Scan"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { PathParser } from 'dynamodb-toolbox/entity/actions/parsePaths'\n\n// \ud83d\udc47 To be used in DynamoDB commands\nconst { ProjectionExpression, ExpressionAttributeNames } =\n  PokemonEntity.build(PathParser)\n    .parse(['name', 'level'])\n    .toCommandOptions()\n")),(0,o.yg)("h2",{id:"methods"},"Methods"),(0,o.yg)("h3",{id:"parse"},(0,o.yg)("inlineCode",{parentName:"h3"},"parse(...)")),(0,o.yg)("p",{style:{marginTop:"-15px"}},(0,o.yg)("i",null,(0,o.yg)("code",null,"(paths: Path<ENTITY>[]) => PathParser"))),(0,o.yg)("p",null,"Parses a list of paths. Throws an ",(0,o.yg)("inlineCode",{parentName:"p"},"invalidExpressionAttributePath")," error if a path is invalid:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"PokemonEntity.build(PathParser).parse(['name', 'level'])\n")),(0,o.yg)("p",null,"Note that the ",(0,o.yg)("inlineCode",{parentName:"p"},"parse")," method should only be used once per instance (for now). See ",(0,o.yg)("a",{parentName:"p",href:"#building-paths"},"Building Paths")," for more details on how to write paths."),(0,o.yg)("h3",{id:"tocommandoptions"},(0,o.yg)("inlineCode",{parentName:"h3"},"toCommandOptions()")),(0,o.yg)("p",{style:{marginTop:"-15px"}},(0,o.yg)("i",null,(0,o.yg)("code",null,"() => CommandOptions"))),(0,o.yg)("p",null,"Collapses the ",(0,o.yg)("inlineCode",{parentName:"p"},"PathParser")," state to a set of options that can be used in a DynamoDB command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"const { ProjectionExpression, ExpressionAttributeNames } =\n  PokemonEntity.build(PathParser)\n    .parse(['name', 'level'])\n    .toCommandOptions()\n")),(0,o.yg)("h3",{id:"setid"},(0,o.yg)("inlineCode",{parentName:"h3"},"setId(...)")),(0,o.yg)("p",{style:{marginTop:"-15px"}},(0,o.yg)("i",null,(0,o.yg)("code",null,"(id: string) => ConditionParser"))),(0,o.yg)("p",null,"Adds a prefix to expression attribute keys. Useful to avoid conflicts when using several expressions in a single command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"PokemonEntity.build(PathParser)\n  .parse(['name', 'level'])\n  .toCommandOptions()\n// => {\n//   ProjectionExpression: '#p_1, #p_2',\n//   ExpressionAttributeNames: {\n//     '#p_1': 'name',\n//     '#p_2': 'level'\n//   }\n// }\n\nPokemonEntity.build(PathParser)\n  .setId('0')\n  .parse(['name', 'level'])\n  .toCommandOptions()\n// => {\n//   ProjectionExpression: '#p0_1, #p0_2',\n//   ExpressionAttributeNames: {\n//     '#p0_1': 'name',\n//     '#p0_2': 'level'\n//   }\n// }\n")),(0,o.yg)("h2",{id:"paths"},"Paths"),(0,o.yg)("p",null,"The path syntax from DynamoDB-Toolbox follows the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ProjectionExpressions.html"},"DynamoDB specifications"),", while making it ",(0,o.yg)("strong",{parentName:"p"},"type-safe")," and ",(0,o.yg)("strong",{parentName:"p"},"simpler"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import type {\n  Path,\n  PathIntersection\n} from 'dynamodb-toolbox/entity/actions/parsePaths'\n\ntype PokemonPath = Path<typeof PokemonEntity>\nconst namePath: PokemonPath = 'name'\nconst mapChildPath: PokemonPath = 'weaknesses.fire'\nconst listElementPath: PokemonPath = 'pokeTypes[0]'\n\n// Path common to both entities\ntype PokemonAndTrainerPath = PathIntersection<\n  [typeof PokemonEntity, typeof TrainerEntity]\n>\nconst commonPath: PokemonAndTrainerPath = 'name'\n")))}d.isMDXComponent=!0}}]);