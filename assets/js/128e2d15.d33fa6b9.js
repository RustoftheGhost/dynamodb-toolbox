"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7191],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=m(t),c=r,y=p["".concat(s,".").concat(c)]||p[c]||d[c]||o;return t?a.createElement(y,i(i({ref:n},u),{},{components:t})):a.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(96540),r=t(20053);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>N});var a=t(58168),r=t(96540),o=t(20053),i=t(23104),l=t(56347),s=t(57485),m=t(31682),u=t(89466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,m.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function c(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function y(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,m]=y({queryString:t,groupId:a}),[p,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),g=(()=>{const e=s??p;return c({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),f(e)}),[m,f,o]),tabValues:o}}var g=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:m}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),a=m[t].value;a!==l&&(p(n),s(a))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n)},m.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:c,onClick:d},i,{className:(0,o.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function I(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function v(e){const n=f(e);return r.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},r.createElement(h,(0,a.A)({},e,n)),r.createElement(I,(0,a.A)({},e,n)))}function N(e){const n=(0,g.A)();return r.createElement(v,(0,a.A)({key:String(n)},e))}},60099:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>m,toc:()=>p});var a=t(58168),r=(t(96540),t(15680)),o=t(11470),i=t(19365);const l={title:"Type Inference"},s="Type Inference",m={unversionedId:"entities/type-inference/index",id:"entities/type-inference/index",title:"Type Inference",description:"DynamoDB-Toolbox exposes several generic types to infer custom types from your entities.",source:"@site/docs/3-entities/3-type-inference/index.md",sourceDirName:"3-entities/3-type-inference",slug:"/entities/type-inference/",permalink:"/docs/entities/type-inference/",draft:!1,tags:[],version:"current",frontMatter:{title:"Type Inference"},sidebar:"tutorialSidebar",previous:{title:"Internal Attributes",permalink:"/docs/entities/internal-attributes/"},next:{title:"GetItem",permalink:"/docs/entities/actions/get-item/"}},u={},p=[{value:"Writes",id:"writes",level:2},{value:"Reads",id:"reads",level:2}],d={toc:p},c="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"type-inference"},"Type Inference"),(0,r.yg)("p",null,"DynamoDB-Toolbox exposes several generic types to ",(0,r.yg)("strong",{parentName:"p"},"infer custom types")," from your entities."),(0,r.yg)("p",null,"Which one you should use depends on your usage context, for instance, whether it\u2019s within a ",(0,r.yg)("a",{parentName:"p",href:"#writes"},"write")," or a ",(0,r.yg)("a",{parentName:"p",href:"#reads"},"read")," operation."),(0,r.yg)("h2",{id:"writes"},"Writes"),(0,r.yg)("p",null,"For write operations, DynamoDB-Toolbox exposes the following generic types:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ValidItem"),": A valid entity item"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"InputItem"),": Similar to ",(0,r.yg)("inlineCode",{parentName:"li"},"ValidItem"),", but with defaulted and linked attributes optional"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"TransformedItem"),": A valid entity item after transformation")),(0,r.yg)("mermaid",{value:'flowchart LR\n  classDef mmddescription fill:none,stroke:none\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n\n  InputItem["<b>InputItem</b><br/><i>(+ KeyInputItem)</i>"]\n\n  subgraph Fill[ ]\n    FillDescription["<b>Fill</b>"]:::mmddescription\n    fillDescr(+ defaults<br/>+ links):::mmddescription\n  end\n  Fill:::mmdcontainer\n\n  ValidItem["<b>ValidItem</b>"]\n\n  InputItem.-FillDescription\n  FillDescription.->ValidItem\n\n  subgraph Transform[ ]\n    TransformDescription["<b>Transform</b>"]:::mmddescription\n    transformDescr(+ renaming<br/>+ transforms):::mmddescription\n  end\n  Transform:::mmdcontainer\n\n  TransformedItem["<b>TransformedItem</b><br/><i>(+ SavedItem)</i>"]\n\n  ValidItem.-TransformDescription\n  TransformDescription.->TransformedItem\n'}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type {\n  InputItem,\n  ValidItem,\n  TransformedItem\n} from 'dynamodb-toolbox/entity'\n\ntype Input = InputItem<typeof PokemonEntity>\ntype Valid = ValidItem<typeof PokemonEntity>\ntype Transformed = TransformedItem<typeof PokemonEntity>\n")),(0,r.yg)("p",null,"By default, those generics use the ",(0,r.yg)("inlineCode",{parentName:"p"},"put")," write mode, but you can switch to the ",(0,r.yg)("inlineCode",{parentName:"p"},"key")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," modes with the ",(0,r.yg)("inlineCode",{parentName:"p"},"mode")," option. This impacts which the presence and requiredness of attributes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"type ValidKey = ValidItem<\n  typeof PokemonEntity,\n  { mode: 'key' }\n>\ntype ValidUpdate = ValidItem<\n  typeof PokemonEntity,\n  { mode: 'update' }\n>\n")),(0,r.yg)("admonition",{title:"Example",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Here are ",(0,r.yg)("strong",{parentName:"p"},"step-by-step")," examples:"),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\u261d\ufe0f ",(0,r.yg)("b",null,"Entity")),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const PokemonEntity = new Entity({\n  table,\n  schema: schema({\n    // key attributes\n    pokemonClass: string()\n      .key()\n      .transform(prefix('POKEMON'))\n      .savedAs('partitionKey'),\n    pokemonId: string().key().savedAs('sortKey'),\n\n    // other attributes\n    name: string().optional(),\n    level: number().default(1)\n  }).and(prevSchema => ({\n    levelPlusOne: number().link<typeof prevSchema>(\n      ({ level }) => level + 1\n    )\n  }))\n  // timestamps\n  timestamps: true\n  ...\n})\n"))),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,(0,r.yg)("code",null,"'put'")," mode")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"input",label:"InputItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n  "name": "Pikachu"\n}\n'))),(0,r.yg)(i.A,{value:"valid",label:"ValidItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n+ "created": "2022-01-01T00:00:00.000Z",\n+ "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n+ "level": 1,\n+ "levelPlusOne": 2,\n}\n'))),(0,r.yg)(i.A,{value:"transformed",label:"TransformedItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n- "pokemonClass": "pikachu",\n+ "partitionKey": "POKEMON#pikachu",\n- "pokemonId": "123",\n+ "sortKey": "123",\n  "created": "2022-01-01T00:00:00.000Z",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n  "level": 1,\n  "levelPlusOne": 2,\n}\n'))))),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,(0,r.yg)("code",null,"'key'")," mode")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"input",label:"InputItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n+ (Only key attributes are required)\n'))),(0,r.yg)(i.A,{value:"valid",label:"ValidItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n'))),(0,r.yg)(i.A,{value:"transformed",label:"TransformedItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n- "pokemonClass": "pikachu",\n+ "partitionKey": "POKEMON#pikachu",\n- "pokemonId": "123",\n+ "sortKey": "123",\n}\n'))))),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,(0,r.yg)("code",null,"'update'")," mode")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"input",label:"InputItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n  "name": "PlantyDino",\n}\n'))),(0,r.yg)(i.A,{value:"valid",label:"ValidItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n+ "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n'))),(0,r.yg)(i.A,{value:"transformed",label:"TransformedItem",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n- "pokemonClass": "bulbasaur",\n+ "partitionKey": "POKEMON#bulbasaur",\n- "pokemonId": "123",\n+ "sortKey": "123",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n')))))),(0,r.yg)("p",null,"For convenience, DynamoDB-Toolbox also exposes the following generic types:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"KeyInputItem"),": Similar to ",(0,r.yg)("inlineCode",{parentName:"li"},"InputItem")," in the ",(0,r.yg)("inlineCode",{parentName:"li"},"key")," mode."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"SavedItem"),": Similar to ",(0,r.yg)("inlineCode",{parentName:"li"},"TransformedItem")," but adds the ",(0,r.yg)("a",{parentName:"li",href:"/docs/tables/actions/parse-primary-key/#output"},(0,r.yg)("inlineCode",{parentName:"a"},"PrimaryKey"))," of the Entity's Table")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import {\n  KeyInputItem,\n  SavedItem\n} from 'dynamodb-toolbox/entity'\n\ntype KeyInput = KeyInputItem<typeof PokemonEntity>\ntype Saved = SavedItem<typeof PokemonEntity>\n")),(0,r.yg)("h2",{id:"reads"},"Reads"),(0,r.yg)("p",null,"DynamoDB-Toolbox exposes the ",(0,r.yg)("inlineCode",{parentName:"p"},"FormattedItem")," generic type which is similar to ",(0,r.yg)("inlineCode",{parentName:"p"},"ValidItem"),", except that ",(0,r.yg)("inlineCode",{parentName:"p"},"hidden")," fields are omitted:"),(0,r.yg)("mermaid",{value:'flowchart RL\n  classDef mmddescription fill:none,stroke:none\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n  classDef mmdspace fill:none,stroke:none,color:#0000\n\n  SavedItem["<b>SavedItem</b>"]\n\n  subgraph Formatting[ ]\n    FormattingDescription["<b>Format</b>"]:::mmddescription\n  end\n  Formatting:::mmdcontainer\n\n  FormattedItem["<b>FormattedItem</b>"]\n\n  SavedItem.-FormattingDescription\n  FormattingDescription.->FormattedItem\n\n  space1( ):::mmdspace\n\n  FormattedItem ~~~~~~ space1\n'}),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { FormattedItem } from 'dynamodb-toolbox/entity'\n\ntype Formatted = FormattedItem<typeof PokemonEntity>\n")))}y.isMDXComponent=!0}}]);