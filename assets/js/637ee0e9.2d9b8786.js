"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1335],{15680:(e,t,a)=>{a.d(t,{xA:()=>m,yg:()=>y});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,y=u["".concat(s,".").concat(c)]||u[c]||d[c]||i;return a?n.createElement(y,o(o({ref:t},m),{},{components:a})):n.createElement(y,o({ref:t},m))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},73191:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(58168),r=(a(96540),a(15680));const i={title:"Custom Validation"},o="Custom Validation",l={unversionedId:"schemas/custom-validation/index",id:"schemas/custom-validation/index",title:"Custom Validation",description:"All attribute types support adding custom validation during the parsing step (see the Parser action for more details).",source:"@site/docs/4-schemas/4-custom-validation/index.md",sourceDirName:"4-schemas/4-custom-validation",slug:"/schemas/custom-validation/",permalink:"/docs/schemas/custom-validation/",draft:!1,tags:[],version:"current",frontMatter:{title:"Custom Validation"},sidebar:"tutorialSidebar",previous:{title:"Defaults & Links",permalink:"/docs/schemas/defaults-and-links/"},next:{title:"any",permalink:"/docs/schemas/any/"}},s={},p=[{value:"Validators",id:"validators",level:2},{value:"Recursive Schemas",id:"recursive-schemas",level:2}],m={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"custom-validation"},"Custom Validation"),(0,r.yg)("p",null,"All attribute types support adding custom validation during the ",(0,r.yg)("strong",{parentName:"p"},"parsing step")," (see the ",(0,r.yg)("a",{parentName:"p",href:"/docs/schemas/actions/parse"},(0,r.yg)("inlineCode",{parentName:"a"},"Parser"))," action for more details)."),(0,r.yg)("p",null,"There are three kinds of validators:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"putValidate"),": Applied on put actions (e.g. ",(0,r.yg)("a",{parentName:"li",href:"/docs/entities/actions/put-item/"},(0,r.yg)("inlineCode",{parentName:"a"},"PutItemCommand")),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"updateValidate"),": Applied on update actions (e.g. ",(0,r.yg)("a",{parentName:"li",href:"/docs/entities/actions/update-item/"},(0,r.yg)("inlineCode",{parentName:"a"},"UpdateItemCommand")),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"keyValidate"),": Overrides other validators on key attributes (ignored otherwise)")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"validate")," method is a shorthand that acts as ",(0,r.yg)("inlineCode",{parentName:"p"},"keyValidate")," on key attributes and ",(0,r.yg)("inlineCode",{parentName:"p"},"putValidate")," otherwise."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"\u261d\ufe0f In order for the ",(0,r.yg)("inlineCode",{parentName:"p"},".validate(...)")," shorthand to work properly on key attributes, make sure to use it ",(0,r.yg)("strong",{parentName:"p"},"after")," calling ",(0,r.yg)("inlineCode",{parentName:"p"},".key()"),".")),(0,r.yg)("h2",{id:"validators"},"Validators"),(0,r.yg)("p",null,"A custom ",(0,r.yg)("strong",{parentName:"p"},"validator")," is a function that takes an input (validated by the schema) and returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean"),"."),(0,r.yg)("p",null,"For instance, you can make sure that a ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," attribute has more than 3 characters like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const mySchema = schema({\n  name: string().validate(\n    // \ud83d\ude4c Types are correctly inferred!\n    name => name.length > 3\n  )\n})\n\n// \u274c Raises a `parsing.customValidationFailed` error\nmySchema.build(Parser).parse('foo')\n")),(0,r.yg)("p",null,"In case of invalid value, you can ",(0,r.yg)("strong",{parentName:"p"},"return a ",(0,r.yg)("inlineCode",{parentName:"strong"},"string"))," to provide more context through the error message:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const mySchema = schema({\n  name: string().validate(name =>\n    name.length > 3 ? true : 'Provide a longer name'\n  )\n})\n\nmySchema.build(Parser).parse('foo')\n// => \u274c Custom validation for attribute 'name' failed with message: Provide a longer name.\n")),(0,r.yg)("p",null,"Finally, note that the attribute schema is also passed to the validator:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { Attribute } from 'dynamodb-toolbox/attributes'\n\nconst validator = (input: unknown, attr: Attribute) => {\n  ... // custom validation here\n}\n\nconst mySchema = schema({\n  name: string().validate(validator)\n})\n")),(0,r.yg)("h2",{id:"recursive-schemas"},"Recursive Schemas"),(0,r.yg)("p",null,"Validators are a great way to create ",(0,r.yg)("strong",{parentName:"p"},"recursive schemas"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { Parser } from 'dynamodb-toolbox/schema/actions/parse'\n\nconst isValidBulletList = (bulletList: unknown): boolean =>\n  bulletListSchema.build(Parser).validate(bulletList)\n\nconst bulletListSchema = schema({\n  title: string(),\n  subBulletList: any()\n    .optional()\n    .validate(isValidBulletList)\n})\n")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Actually, you can improve the performances of this code by instanciating a single ",(0,r.yg)("inlineCode",{parentName:"p"},"Parser"),":"),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,"Show code")),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"let bulletListParser:\n  | Parser<typeof bulletListSchema>\n  | undefined\n\nconst isValidBulletList = (\n  bulletList: unknown\n): boolean => {\n  if (bulletListParser === undefined) {\n    bulletListParser = bulletListSchema.build(Parser)\n  }\n\n  return bulletListParser.validate(bulletList)\n}\n\nconst bulletListSchema = schema({\n  title: string(),\n  subBulletList: any()\n    .optional()\n    .validate(isValidBulletList)\n})\n")))),(0,r.yg)("p",null,"In those cases, type inference ",(0,r.yg)("strong",{parentName:"p"},"only works partially")," as the ",(0,r.yg)("inlineCode",{parentName:"p"},"subBulletList")," property is inferred as ",(0,r.yg)("inlineCode",{parentName:"p"},"unknown"),"."),(0,r.yg)("p",null,"However, a ",(0,r.yg)("strong",{parentName:"p"},"slight override")," of the inferred types will get you there:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { FormattedValue } from 'dynamodb-toolbox/schema/actions/format'\n\n// \ud83d\ude4c Works as intended!\ntype FormattedBulletList = FormattedValue<\n  typeof bulletListSchema\n> & { subBulletList?: FormattedBulletList }\n")))}d.isMDXComponent=!0}}]);