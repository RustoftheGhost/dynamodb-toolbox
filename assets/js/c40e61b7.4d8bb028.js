"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1354],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,k=c["".concat(l,".").concat(d)]||c[d]||p[d]||o;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(87462),r=n(67294),o=n(86010),i=n(12466),s=n(76775),l=n(91980),u=n(67392),m=n(50012);function p(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=c(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,u]=k({queryString:n,groupId:a}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,m.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),y=(()=>{const e=l??p;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var y=n(72389);const f="tabList__CuJ",h="tabItem_LNqP";function g(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),c=e=>{const t=e.currentTarget,n=m.indexOf(t),a=u[n].value;a!==s&&(p(t),l(a))},d=e=>{var t;let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;n=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;n=m[t]??m[m.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>m.push(e),onKeyDown:d,onClick:c},i,{className:(0,o.Z)("tabs__item",h,null==i?void 0:i.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",f)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function T(e){const t=(0,y.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},94317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),i=n(85162);const s={title:"Usage"},l="Entity",u={unversionedId:"entities/usage/index",id:"entities/usage/index",title:"Usage",description:"Entities represent a category of items in your Table.",source:"@site/docs/3-entities/1-usage/index.md",sourceDirName:"3-entities/1-usage",slug:"/entities/usage/",permalink:"/docs/entities/usage/",draft:!1,tags:[],version:"current",frontMatter:{title:"Usage"},sidebar:"tutorialSidebar",previous:{title:"Spy",permalink:"/docs/tables/actions/spy/"},next:{title:"Internal Attributes",permalink:"/docs/entities/internal-attributes/"}},m={},p=[{value:"Constructor",id:"constructor",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>schema</code>",id:"schema",level:3},{value:"<code>table</code>",id:"table",level:3},{value:"<code>computeKey</code>",id:"computekey",level:3},{value:"<code>entityAttributeName</code>",id:"entityattributename",level:3},{value:"<code>timestamps</code>",id:"timestamps",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"entity"},"Entity"),(0,r.kt)("p",null,"Entities represent a ",(0,r.kt)("strong",{parentName:"p"},"category of items")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,r.kt)("p",null,"An entity must belong to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),", but a ",(0,r.kt)("inlineCode",{parentName:"p"},"Table")," can ",(0,r.kt)("strong",{parentName:"p"},"contain items from several entities"),". DynamoDB-Toolbox is designed with ",(0,r.kt)("a",{parentName:"p",href:"https://www.alexdebrie.com/posts/dynamodb-single-table/"},"Single Tables")," in mind, but works just as well with multiple tables and still makes your life much easier (e.g. for ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/actions/batching/"},"batch operations")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/actions/transactions/"},"transactions"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Entity } from 'dynamodb-toolbox/entity';\nimport { schema } from 'dynamodb-toolbox/schema';\n\nconst PokemonEntity = new Entity({\n  name: 'POKEMON',\n  table: PokeTable,\n  schema: schema(...)\n});\n")),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," takes a single parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," that accepts the following properties:"),(0,r.kt)("h3",{id:"name"},(0,r.kt)("inlineCode",{parentName:"h3"},"name")),(0,r.kt)("p",{style:{marginTop:"-15px"}},(0,r.kt)("i",null,"(required)")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," that uniquely identifies your entity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const PokemonEntity = new Entity({\n  name: 'POKEMON',\n  ...\n})\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"DynamoDB-Toolbox automatically tags your items with their respective entity names (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/internal-attributes/#entity"},"Internal Attributes"),")."),(0,r.kt)("p",{parentName:"admonition"},"\u261d\ufe0f The consequence is that ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("strong",{parentName:"p"},"cannot be updated")," once your ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," has its first items","*"," (at least not without a data migration first), so choose wisely!"),(0,r.kt)("sup",null,(0,r.kt)("i",null,"(* This tag is required for some features to work, so you also have to add it if you migrate existing data to DynamoDB-Toolbox.)"))),(0,r.kt)("h3",{id:"schema"},(0,r.kt)("inlineCode",{parentName:"h3"},"schema")),(0,r.kt)("p",{style:{marginTop:"-15px"}},(0,r.kt)("i",null,"(required)")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity"),". See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/schemas/usage/"},"Schema Section")," for more details on how to define schemas."),(0,r.kt)("h3",{id:"table"},(0,r.kt)("inlineCode",{parentName:"h3"},"table")),(0,r.kt)("p",{style:{marginTop:"-15px"}},(0,r.kt)("i",null,"(required)")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/tables/usage/"},(0,r.kt)("inlineCode",{parentName:"a"},"Table"))," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity"),"."),(0,r.kt)("p",null,"DynamoDB-Toolbox must check that an entity ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," matches its ",(0,r.kt)("inlineCode",{parentName:"p"},"Table")," primary key somehow. In simple cases, both schemas can ",(0,r.kt)("strong",{parentName:"p"},"simply fit"),":"),(0,r.kt)("admonition",{title:"Examples",type:"note"},(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"direct-match",label:"Direct match",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const PokeTable = new Table({\n  partitionKey: { name: 'pk', type: 'string' },\n  sortKey: { name: 'sk', type: 'number' },\n  ...\n})\n\nconst PokemonEntity = new Entity({\n  table: PokeTable,\n  schema: schema({\n    pk: string().key(),\n    sk: number().key(),\n    ...\n  }),\n})\n"))),(0,r.kt)(i.Z,{value:"single-partition",label:"Single partition",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const PokeTable = new Table({\n  partitionKey: { name: 'pk', type: 'string' },\n  sortKey: { name: 'sk', type: 'number' },\n  ...\n})\n\nconst PokemonEntity = new Entity({\n  table: PokeTable,\n  schema: schema({\n    // \ud83d\udc47 constant partition key\n    pk: string().const('POKEMON').key(),\n    sk: number().key(),\n    ...\n  })\n})\n"))),(0,r.kt)(i.Z,{value:"saving-as",label:"Renaming",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const PokeTable = new Table({\n  partitionKey: { name: 'pk', type: 'string' },\n  sortKey: { name: 'sk', type: 'number' },\n  ...\n})\n\nconst PokemonEntity = new Entity({\n  table: PokeTable,\n  schema: schema({\n    // \ud83d\udc47 renaming works\n    pokemonId: string().savedAs('pk').key(),\n    level: number().savedAs('sk').key(),\n    ...\n  }),\n})\n"))),(0,r.kt)(i.Z,{value:"prefixing",label:"Prefixing",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { prefix } from 'dynamodb-toolbox/transformers/prefix'\n\nconst PokeTable = new Table({\n  partitionKey: { name: 'pk', type: 'string' },\n  sortKey: { name: 'sk', type: 'number' },\n  ...\n})\n\nconst PokemonEntity = new Entity({\n  table: PokeTable,\n  schema: schema({\n    // \ud83d\udc47 saved as `POKEMON#${pokemonId}`\n    pokemonId: string()\n      .transform(prefix('POKEMON'))\n      .savedAs('pk')\n      .key(),\n    level: number().savedAs('sk').key(),\n    ...\n  })\n})\n")),(0,r.kt)("p",{parentName:"admonition"},"\ud83d\udc49 See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/schemas/transformers/usage"},"transformers section")," for more details on transformers.")))),(0,r.kt)("h3",{id:"computekey"},(0,r.kt)("inlineCode",{parentName:"h3"},"computeKey")),(0,r.kt)("p",{style:{marginTop:"-15px"}},(0,r.kt)("i",null,"(potentially required, depending on ",(0,r.kt)("code",null,"schema"),")")),(0,r.kt)("p",null,"...but ",(0,r.kt)("strong",{parentName:"p"},"using schemas that don't fit is OK"),"."),(0,r.kt)("p",null,"In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," constructor requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"computeKey")," function to derive the primary key from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," key attributes."),(0,r.kt)("p",null,"This can be useful for more complex cases like mapping several attributes to the same key:"),(0,r.kt)("admonition",{title:"Examples",type:"note"},(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"renaming",label:"Renaming",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const PokemonEntity = new Entity({\n  table: PokeTable,\n  schema: schema({\n    pokemonId: string().key(),\n    level: number().key(),\n    ...\n  }),\n  // \ud83d\ude4c Type are correctly inferred!\n  computeKey: ({ pokemonId, level }) => ({\n    pk: pokemonId,\n    sk: level\n  })\n})\n"))),(0,r.kt)(i.Z,{value:"composing",label:"Composing",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const PokemonEntity = new Entity({\n  table: PokeTable,\n  schema: schema({\n    specifiers: list(string()).key(),\n    sk: number().key(),\n    ...\n  }),\n  computeKey: ({ specifiers, sk }) => ({\n    pk: specifiers.join('#'),\n    sk\n  })\n})\n"))))),(0,r.kt)("h3",{id:"entityattributename"},(0,r.kt)("inlineCode",{parentName:"h3"},"entityAttributeName")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," to customize the name of the internal entity attribute (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/internal-attributes/#entity"},"Internal Attributes"),")."),(0,r.kt)("h3",{id:"timestamps"},(0,r.kt)("inlineCode",{parentName:"h3"},"timestamps")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," to customize the internal ",(0,r.kt)("inlineCode",{parentName:"p"},"created")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"modified")," attributes (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/entities/internal-attributes/#timestamp-attributes"},"Internal Attributes"),")."))}d.isMDXComponent=!0}}]);