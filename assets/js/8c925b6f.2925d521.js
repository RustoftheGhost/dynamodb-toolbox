"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6036],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,k=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),o=n(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>I});var a=n(87462),o=n(67294),r=n(86010),l=n(12466),i=n(76775),s=n(91980),c=n(67392),u=n(50012);function p(e){return function(e){var t;return(null==(t=o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function m(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=m(e),[l,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,c]=k({queryString:n,groupId:a}),[p,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),h=(()=>{const e=s??p;return d({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),y(e)}),[c,y,r]),tabValues:r}}var h=n(72389);const b="tabList__CuJ",g="tabItem_LNqP";function f(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(p(t),s(a))},d=e=>{var t;let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},l,{className:(0,r.Z)("tabs__item",g,null==l?void 0:l.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=y(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",b)},o.createElement(f,(0,a.Z)({},e,t)),o.createElement(v,(0,a.Z)({},e,t)))}function I(e){const t=(0,h.Z)();return o.createElement(N,(0,a.Z)({key:String(t)},e))}},27972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(87462),o=(n(67294),n(3905)),r=n(74866),l=n(85162);const i={title:"Spy",sidebar_custom_props:{sidebarActionType:"util"}},s="EntitySpy",c={unversionedId:"entities/actions/spy/index",id:"entities/actions/spy/index",title:"Spy",description:"Enables spying the provided Entity.",source:"@site/docs/3-entities/3-actions/20-spy/index.md",sourceDirName:"3-entities/3-actions/20-spy",slug:"/entities/actions/spy/",permalink:"/docs/entities/actions/spy/",draft:!1,tags:[],version:"current",frontMatter:{title:"Spy",sidebar_custom_props:{sidebarActionType:"util"}},sidebar:"tutorialSidebar",previous:{title:"Format",permalink:"/docs/entities/actions/format/"},next:{title:"Usage",permalink:"/docs/schemas/usage/"}},u={},p=[{value:"Methods",id:"methods",level:2},{value:"<code>on(...)</code>",id:"on",level:3},{value:"<code>sent(...)</code>",id:"sent",level:3},{value:"<code>reset()</code>",id:"reset",level:3},{value:"<code>restore()</code>",id:"restore",level:3},{value:"Stub Methods",id:"stub-methods",level:2},{value:"<code>resolve(...)</code>",id:"resolve",level:3},{value:"<code>mock(...)</code>",id:"mock",level:3},{value:"<code>reject(...)</code>",id:"reject",level:3},{value:"Inspector methods",id:"inspector-methods",level:2},{value:"<code>count()</code>",id:"count",level:3},{value:"<code>allArgs()</code>",id:"allargs",level:3},{value:"<code>args(...)</code>",id:"args",level:3}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entityspy"},"EntitySpy"),(0,o.kt)("p",null,"Enables ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mock_object"},"spying")," the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"EntitySpy")," is useful for writing ",(0,o.kt)("strong",{parentName:"p"},"unit tests"),", allowing you to stub sendable actions (e.g. ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/get-item/"},(0,o.kt)("inlineCode",{parentName:"a"},"GetItemCommand")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/entities/actions/put-item/"},(0,o.kt)("inlineCode",{parentName:"a"},"PutItemCommand"))," etc.), mock their behavior, and inspect their call history:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { EntitySpy } from 'dynamodb-toolbox/entity/actions/spy'\n\nconst entitySpy = PokemonEntity.build(EntitySpy)\n\n// \ud83d\ude4c Type-safe!\nentitySpy.on(GetItemCommand).resolve({ Item: pokeMock })\n\nconst { Item } = await PokemonEntity.build(GetItemCommand)\n  .key(key)\n  .options({ consistent: true })\n  .send()\n\nexpect(Item).toStrictEqual(pokeMock) // \u2705\n\nconst getCount = entitySpy.sent(GetItemCommand).count()\nexpect(getCount).toBe(1) // \u2705\n\n// Reset history\nentitySpy.reset()\n\n// Stop spying\nentitySpy.restore()\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Non-mocked actions are sent as usual.")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"on"},(0,o.kt)("inlineCode",{parentName:"h3"},"on(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"(Action: SENDABLE_ACTION) => Stub<ENTITY, SENDABLE_ACTION>"))),(0,o.kt)("p",null,"Enables stubbing a sendable action (see the ",(0,o.kt)("a",{parentName:"p",href:"#stub-methods"},"stub section")," section for more details):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\nconst getStub = entitySpy.on(GetItemCommand)\n")),(0,o.kt)("h3",{id:"sent"},(0,o.kt)("inlineCode",{parentName:"h3"},"sent(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"(Action: SENDABLE_ACTION) => Inspector<ENTITY, SENDABLE_ACTION>"))),(0,o.kt)("p",null,"Enables inspecting a sendable action call history (see the ",(0,o.kt)("a",{parentName:"p",href:"#inspector-methods"},"inspector section")," section for more details):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { GetItemCommand } from 'dynamodb-toolbox/entity/actions/get'\n\nconst getInspector = entitySpy.sent(GetItemCommand)\n")),(0,o.kt)("h3",{id:"reset"},(0,o.kt)("inlineCode",{parentName:"h3"},"reset()")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"() => Spy<ENTITY>"))),(0,o.kt)("p",null,"Reset the call history for all actions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"expect(getInspector.count()).toBe(1) // \u2705\n\nentitySpy.reset()\n\nexpect(getInspector.count()).toBe(0) // \u2705\n\n// The method returns the spy, so you can chain a new stub:\nentitySpy.reset().on(GetItemCommand).resolve({ Item: ... })\n")),(0,o.kt)("h3",{id:"restore"},(0,o.kt)("inlineCode",{parentName:"h3"},"restore()")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"() => void"))),(0,o.kt)("p",null,"Stop spying the ",(0,o.kt)("inlineCode",{parentName:"p"},"Entity")," altogether:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// After this point, the spy is not able to intercept any action\nentitySpy.restore()\n")),(0,o.kt)("h2",{id:"stub-methods"},"Stub Methods"),(0,o.kt)("h3",{id:"resolve"},(0,o.kt)("inlineCode",{parentName:"h3"},"resolve(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"(responseMock: Response<ACTION>) => Spy<ENTITY>"))),(0,o.kt)("p",null,"Mocks the response of a sendable action ",(0,o.kt)("inlineCode",{parentName:"p"},".send()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// \ud83d\ude4c Type-safe!\nentitySpy.on(GetItemCommand).resolve({ Item: pokeMock })\n\nconst { Item } = await PokemonEntity.build(GetItemCommand)\n  .key(key)\n  .send()\n\nexpect(Item).toStrictEqual(pokeMock) // \u2705\n")),(0,o.kt)("h3",{id:"mock"},(0,o.kt)("inlineCode",{parentName:"h3"},"mock(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"(mock: ((...args: Args<ACTION>) => Promisable<Response<ACTION>> | undefined)) => Spy<ENTITY>"))),(0,o.kt)("p",null,"Mocks the implementation of a sendable action ",(0,o.kt)("inlineCode",{parentName:"p"},".send()")," method (synchronously or asynchronously), enabling you to return dynamic responses:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// \ud83d\ude4c Type-safe!\nentitySpy.on(GetItemCommand).mock((key, options) => {\n  if (key.pokemonId === 'pikachu') {\n    return { Item: pikachuMock }\n  }\n})\n\nconst { Item } = await PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'pikachu' })\n  .send()\n\nexpect(Item).toStrictEqual(pikachuMock) // \u2705\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Returning ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," is possible and lets the action proceed as usual.")),(0,o.kt)("h3",{id:"reject"},(0,o.kt)("inlineCode",{parentName:"h3"},"reject(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"(error?: string | Error | AwsError) => Spy<ENTITY>"))),(0,o.kt)("p",null,"Simulates an error during the execution of a sendable action ",(0,o.kt)("inlineCode",{parentName:"p"},".send()")," method:"),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"any",label:"Any error",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy.on(GetItemCommand).reject()\n\nawait expect(() =>\n  PokemonEntity.build(GetItemCommand).key(key).send()\n).rejects.toThrow() // \u2705\n"))),(0,o.kt)(l.Z,{value:"message",label:"Message",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy.on(GetItemCommand).reject('Fake error')\n\nawait expect(() =>\n  PokemonEntity.build(GetItemCommand).key(key).send()\n).rejects.toThrow('Fake error') // \u2705\n"))),(0,o.kt)(l.Z,{value:"getter",label:"AWS Error",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy.on(GetItemCommand).reject({\n  Name: 'ServiceUnavailable',\n  Code: '503',\n  Message: 'Service is unable to handle request.',\n  $fault: 'server',\n  $service: 'DynamoDB'\n})\n\nawait expect(() =>\n  PokemonEntity.build(GetItemCommand).key(key).send()\n).rejects.toThrow({ Name: 'ServiceUnavailable' }) // \u2705\n")))),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Stub methods return the original spy, so you can easily chain them:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy\n  .on(GetItemCommand)\n  .resolve({ Item: ... })\n  .on(PutItemCommand)\n  .reject('Some error')\n"))),(0,o.kt)("h2",{id:"inspector-methods"},"Inspector methods"),(0,o.kt)("h3",{id:"count"},(0,o.kt)("inlineCode",{parentName:"h3"},"count()")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"() => number"))),(0,o.kt)("p",null,"Returns the number of times the action was sent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy.on(GetItemCommand).resolve({ Item: pokeMock })\n\nconst { Item } =\n  await PokemonEntity.build(GetItemCommand).send()\n\nconst count = entitySpy.sent(GetItemCommand).count()\n\nexpect(count).toBe(1) // \u2705\n")),(0,o.kt)("h3",{id:"allargs"},(0,o.kt)("inlineCode",{parentName:"h3"},"allArgs()")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"() => Args<ACTION>[]"))),(0,o.kt)("p",null,"Returns the arguments of the sendable action call history:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy.on(GetItemCommand).resolve({})\n\nawait PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'pikachu' })\n  .options({ consistent: true })\n  .send()\nawait PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'charizard' })\n  .send()\n\nconst allArgs = entitySpy.sent(GetItemCommand).allArgs()\n\nexpect(allArgs).toStrictEqual([\n  // First call\n  [{ pokemonId: 'pikachu' }, { consistent: true }],\n  // Second call\n  [{ pokemoneId: 'charizard' }, {}]\n]) // \u2705\n")),(0,o.kt)("h3",{id:"args"},(0,o.kt)("inlineCode",{parentName:"h3"},"args(...)")),(0,o.kt)("p",{style:{marginTop:"-15px"}},(0,o.kt)("i",null,(0,o.kt)("code",null,"(index: number) => Args<ACTION>"))),(0,o.kt)("p",null,"Returns the arguments of the n-th action of the call history:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"entitySpy.on(GetItemCommand).resolve({})\n\nawait PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'pikachu' })\n  .options({ consistent: true })\n  .send()\nawait PokemonEntity.build(GetItemCommand)\n  .key({ pokemonId: 'charizard' })\n  .send()\n\nconst firstArgs = entitySpy.sent(GetItemCommand).args(0)\n\nexpect(firstArgs).toStrictEqual([\n  { pokemonId: 'pikachu' },\n  { consistent: true }\n]) // \u2705\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note that the index is zero-based.")))}d.isMDXComponent=!0}}]);