"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4466],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,y=d["".concat(s,".").concat(c)]||d[c]||m[c]||o;return t?a.createElement(y,i(i({ref:n},u),{},{components:t})):a.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>i});var a=t(96540),r=t(20053);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>k});var a=t(58168),r=t(96540),o=t(20053),i=t(23104),l=t(56347),s=t(57485),p=t(31682),u=t(89466);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,p.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function c(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function y(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=m(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,p]=y({queryString:t,groupId:a}),[d,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),b=(()=>{const e=s??d;return c({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var b=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),m=e=>{const n=e.currentTarget,t=u.indexOf(n),a=p[t].value;a!==l&&(d(n),s(a))},c=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:c,onClick:m},i,{className:(0,o.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":l===n})}),t??n)})))}function N(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function v(e){const n=g(e);return r.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},r.createElement(h,(0,a.A)({},e,n)),r.createElement(N,(0,a.A)({},e,n)))}function k(e){const n=(0,b.A)();return r.createElement(v,(0,a.A)({key:String(n)},e))}},32836:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=t(58168),r=(t(96540),t(15680)),o=t(11470),i=t(19365);const l={title:"Parse",sidebar_custom_props:{sidebarActionType:"util"}},s="EntityParser",p={unversionedId:"entities/actions/parse/index",id:"entities/actions/parse/index",title:"Parse",description:"Given an input of any type and a mode, validates that it respects the schema of the Entity and applies transformations:",source:"@site/docs/3-entities/4-actions/17-parse/index.md",sourceDirName:"3-entities/4-actions/17-parse",slug:"/entities/actions/parse/",permalink:"/docs/entities/actions/parse/",draft:!1,tags:[],version:"current",frontMatter:{title:"Parse",sidebar_custom_props:{sidebarActionType:"util"}},sidebar:"tutorialSidebar",previous:{title:"Utilities",permalink:"/docs/entities/actions/utilities/"},next:{title:"ParseCondition",permalink:"/docs/entities/actions/parse-condition/"}},u={},d=[{value:"Methods",id:"methods",level:2},{value:"<code>parse(...)</code>",id:"parse",level:3},{value:"<code>reparse(...)</code>",id:"reparse",level:3}],m={toc:d},c="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"entityparser"},"EntityParser"),(0,r.yg)("p",null,"Given an input of any type and a mode, validates that it respects the schema of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," and applies transformations:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { EntityParser } from 'dynamodb-toolbox/entity/actions/parse'\n\nconst {\n  // \ud83d\udc47 Parsed item + Primary key\n  item,\n  key\n} = PokemonEntity.build(EntityParser).parse(input)\n")),(0,r.yg)("p",null,"The default mode is ",(0,r.yg)("inlineCode",{parentName:"p"},"put"),", but you can switch it to ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"key")," if needed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsed = PokemonEntity.build(EntityParser).parse(\n  keyInput,\n  // Additional options\n  { mode: 'key' }\n)\n")),(0,r.yg)("p",null,"In DynamoDB-Toolbox, parsing is done in ",(0,r.yg)("strong",{parentName:"p"},"4 steps"),":"),(0,r.yg)("mermaid",{value:"flowchart LR\n  classDef mmddescription fill:none,stroke:none,font-style:italic\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n  classDef mmdspace fill:none,stroke:none,color:#0000\n\n  input(Input)\n  input:::mmddescription\n\n  subgraph Filling\n    space1( ):::mmdspace\n\n    defaults(Applies<br/><b>defaults<b/>)\n    links(Applies<br/><b>links<b/>)\n    fillDescr(...clones the item, adds<br/><b>defaults</b> and <b>links</b><br/>):::mmddescription\n\n    defaults --\x3e links\n  end\n\n  input .-> defaults\n\n  Filling:::mmdcontainer\n\n  subgraph Parsing\n    space2( ):::mmdspace\n\n    parsing(Throws an<br/><b>error</b> if invalid)\n    parsingDescr(...<b>validates</b> the item.):::mmddescription\n\n    links --\x3e parsing\n  end\n\n\n  Parsing:::mmdcontainer\n\n  subgraph Transforming\n    space3( ):::mmdspace\n\n    transform(Last <b>transforms<b/>)\n    transformDescr(...<b>renames</b><br/>and <b>transforms</b>.):::mmddescription\n\n    parsing--\x3etransform\n  end\n\n  Transforming:::mmdcontainer\n\n  output(Output)\n  output:::mmddescription\n\n  transform .-> output"}),(0,r.yg)("p",null,"Note that:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Additional fields are omitted, but inputs are not mutated"),(0,r.yg)("li",{parentName:"ul"},"The mode ",(0,r.yg)("inlineCode",{parentName:"li"},"defaults")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"links")," are applied"),(0,r.yg)("li",{parentName:"ul"},"Transformations (i.e. ",(0,r.yg)("inlineCode",{parentName:"li"},"savedAs")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"transforms"),") are applied")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Table")," primary key is derived from the validated input by applying ",(0,r.yg)("a",{parentName:"p",href:"/docs/entities/usage/#computekey"},(0,r.yg)("inlineCode",{parentName:"a"},"computeKey"))," if it exists, or extracted from the transformed input otherwise."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"This action is mostly a ",(0,r.yg)("strong",{parentName:"p"},"wrapper around the ",(0,r.yg)("a",{parentName:"strong",href:"/docs/schemas/actions/parse"},(0,r.yg)("inlineCode",{parentName:"a"},"SchemaParser"))," action"),", so we highly recommend you read its dedicated documentation first.")),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"parse"},(0,r.yg)("inlineCode",{parentName:"h3"},"parse(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: unknown, options?: ParseItemOptions) => TransformedItem<ENTITY>"))),(0,r.yg)("p",null,"Parses an input of any type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsed = PokemonEntity.build(EntityParser).parse(input)\n")),(0,r.yg)("p",null,"You can provide ",(0,r.yg)("strong",{parentName:"p"},"parsing options")," as a second argument. Available options:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"fill")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to complete the input (with ",(0,r.yg)("inlineCode",{parentName:"td"},"defaults")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"links"),") prior to validation or not.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"mode")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"key")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"update")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put")),(0,r.yg)("td",{parentName:"tr",align:null},"The mode of the parsing: Impacts which ",(0,r.yg)("inlineCode",{parentName:"td"},"default")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"link")," should be used, as well as requiredness during validation.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"parseExtension")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("em",{parentName:"td"},"(internal)")),(0,r.yg)("td",{parentName:"tr",align:"center"},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Dependency injection required to parse extended syntax (",(0,r.yg)("inlineCode",{parentName:"td"},"$get"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"$add")," etc.) when using the ",(0,r.yg)("inlineCode",{parentName:"td"},"update")," mode (check example below).")))),(0,r.yg)("admonition",{title:"Examples",type:"note"},(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"put",label:"Put",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemon = {\n  pokemonId: 'pikachu1',\n  name: 'Pikachu',\n  types: ['Electric'],\n  ...\n}\n\nconst parsed = PokemonEntity.build(EntityParser).parse(pokemon)\n"))),(0,r.yg)(i.A,{value:"key",label:"Key",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { key } = PokemonEntity.build(EntityParser).parse(\n  { pokemonId: 'pikachu1' },\n  { mode: 'key' }\n)\n"))),(0,r.yg)(i.A,{value:"update",label:"Update",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const { item } = PokemonEntity.build(EntityParser).parse(\n  { pokemonId: 'bulbasaur1', customName: 'PlantyDino' },\n  { mode: 'update' }\n)\n"))),(0,r.yg)(i.A,{value:"update-extended",label:"Update (extended)",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import {\n  $add,\n  parseUpdateExtension\n} from 'dynamodb-toolbox/entity/actions/update'\n\nconst { item } = PokemonEntity.build(EntityParser).parse(\n  // \ud83d\udc47 `$add` is an extension, so `parseExtension`  is needed\n  { pokemonId: 'pikachu1', customName: $add(1) },\n  { mode: 'update', parseExtension: parseUpdateExtension }\n)\n"))))),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"TransformedItem")," generic type to explicitly type an object as a parsing output object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { TransformedItem } from 'dynamodb-toolbox/entity'\n\nconst transformedItem: TransformedItem<\n  typeof PokemonEntity,\n  // \ud83d\udc47 Optional options\n  { mode: 'key' }\n  // \u274c Throws a type error\n> = { invalid: 'input' }\n")),(0,r.yg)("p",null,"Note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"SavedItem")," generic is actually based on it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { SavedItem } from 'dynamodb-toolbox/parse'\n\nconst savedItem: SavedItem<typeof PokemonEntity> = {\n  pokemonId: '123'\n  ...\n}\n")),(0,r.yg)("h3",{id:"reparse"},(0,r.yg)("inlineCode",{parentName:"h3"},"reparse(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: InputItem<ENTITY>, options?: ParseItemOptions) => TransformedItem<ENTITY>"))),(0,r.yg)("p",null,"Similar to ",(0,r.yg)("a",{parentName:"p",href:"#parse"},(0,r.yg)("inlineCode",{parentName:"a"},".parse")),", but with the input correctly typed (taking the mode into account) instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"unknown"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"PokemonEntity.build(EntityParser)\n  // \u274c Throws a type error\n  .reparse({ invalid: 'input' })\n")),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"InputItem")," generic type (or ",(0,r.yg)("inlineCode",{parentName:"p"},"ValidItem")," if ",(0,r.yg)("inlineCode",{parentName:"p"},"fill")," is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),") to explicitly type an object as a parsing input object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { InputItem } from 'dynamodb-toolbox/entity'\n\nconst input: InputItem<\n  typeof PokemonEntity,\n  // \ud83d\udc47 Optional options\n  { mode: 'key' }\n  // \u274c Throws a type error\n> = { invalid: 'input' }\n")),(0,r.yg)("p",null,"Note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"KeyInput")," generic is actually based on it:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { KeyInput } from 'dynamodb-toolbox/entity'\n\nconst keyInput: KeyInput<typeof PokemonEntity> = {\n  pokemonId: 'pikachu1'\n}\n")))}y.isMDXComponent=!0}}]);