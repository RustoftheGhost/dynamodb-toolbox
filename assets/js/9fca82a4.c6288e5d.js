"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7099],{15680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>g});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=s(a),c=r,g=m["".concat(p,".").concat(c)]||m[c]||u[c]||o;return a?t.createElement(g,l(l({ref:n},d),{},{components:a})):t.createElement(g,l({ref:n},d))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},19365:(e,n,a)=>{a.d(n,{A:()=>l});var t=a(96540),r=a(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,l),hidden:a},n)}},11470:(e,n,a)=>{a.d(n,{A:()=>v});var t=a(58168),r=a(96540),o=a(20053),l=a(23104),i=a(56347),p=a(57485),s=a(31682),d=a(89466);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}function u(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??m(a);return function(e){const n=(0,s.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function c(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:a}=e;const t=(0,i.W6)(),o=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,p.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(t.location.search);n.set(o,e),t.replace({...t.location,search:n.toString()})}),[o,t])]}function y(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,o=u(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[p,s]=g({queryString:a,groupId:t}),[m,y]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,o]=(0,d.Dv)(a);return[t,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:t}),b=(()=>{const e=p??m;return c({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),y(e)}),[s,y,o]),tabValues:o}}var b=a(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:n,block:a,selectedValue:i,selectValue:p,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.a_)(),u=e=>{const n=e.currentTarget,a=d.indexOf(n),t=s[a].value;t!==i&&(m(n),p(t))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;n=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;n=d[a]??d[d.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":a},n)},s.map((e=>{let{value:n,label:a,attributes:l}=e;return r.createElement("li",(0,t.A)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>d.push(e),onKeyDown:c,onClick:u},l,{className:(0,o.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":i===n})}),a??n)})))}function h(e){let{lazy:n,children:a,selectedValue:t}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function k(e){const n=y(e);return r.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},r.createElement(N,(0,t.A)({},e,n)),r.createElement(h,(0,t.A)({},e,n)))}function v(e){const n=(0,b.A)();return r.createElement(k,(0,t.A)({key:String(n)},e))}},65166:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var t=a(58168),r=(a(96540),a(15680)),o=a(11470),l=a(19365);const i={title:"Parse",sidebar_custom_props:{sidebarActionType:"util"}},p="Parser",s={unversionedId:"schemas/actions/parse",id:"schemas/actions/parse",title:"Parse",description:"Given an input of any type and a mode, validates that it respects the schema and applies transformations:",source:"@site/docs/4-schemas/17-actions/1-parse.md",sourceDirName:"4-schemas/17-actions",slug:"/schemas/actions/parse",permalink:"/docs/schemas/actions/parse",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Parse",sidebar_custom_props:{sidebarActionType:"util"}},sidebar:"tutorialSidebar",previous:{title:"anyOf",permalink:"/docs/schemas/anyOf/"},next:{title:"Format",permalink:"/docs/schemas/actions/format"}},d={},m=[{value:"Methods",id:"methods",level:2},{value:"<code>parse(...)</code>",id:"parse",level:3},{value:"<code>reparse(...)</code>",id:"reparse",level:3},{value:"<code>start(...)</code>",id:"start",level:3},{value:"<code>validate(...)</code>",id:"validate",level:3}],u={toc:m},c="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"parser"},"Parser"),(0,r.yg)("p",null,"Given an input of any type and a mode, validates that ",(0,r.yg)("strong",{parentName:"p"},"it respects the schema")," and applies transformations:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import { Parser } from 'dynamodb-toolbox/schema/actions/parse'\n\nconst validPokemon = pokemonSchema\n  .build(Parser)\n  .parse(pokemon)\n")),(0,r.yg)("p",null,"The default mode is ",(0,r.yg)("inlineCode",{parentName:"p"},"put"),", but you can switch it to ",(0,r.yg)("inlineCode",{parentName:"p"},"update")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"key")," if needed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const validKey = pokemonSchema.build(Parser).parse(\n  key,\n  // Additional options\n  { mode: 'key' }\n)\n")),(0,r.yg)("p",null,"In DynamoDB-Toolbox, parsing is done in ",(0,r.yg)("strong",{parentName:"p"},"4 steps"),":"),(0,r.yg)("mermaid",{value:"flowchart LR\n  classDef mmddescription fill:none,stroke:none,font-style:italic\n  classDef mmdcontainer fill:#eee4,stroke-width:1px,stroke-dasharray:3,stroke:#ccc,font-weight:bold,font-size:large\n  classDef mmdspace fill:none,stroke:none,color:#0000\n\n  input(Input)\n  input:::mmddescription\n\n  subgraph Filling\n    space1( ):::mmdspace\n\n    defaults(Applies<br/><b>defaults<b/>)\n    links(Applies<br/><b>links<b/>)\n    fillDescr(...clones the item, adds<br/><b>defaults</b> and <b>links</b><br/>):::mmddescription\n\n    defaults --\x3e links\n  end\n\n  input .-> defaults\n\n  Filling:::mmdcontainer\n\n  subgraph Parsing\n    space2( ):::mmdspace\n\n    parsing(Throws an<br/><b>error</b> if invalid)\n    parsingDescr(...<b>validates</b> the item.):::mmddescription\n\n    links --\x3e parsing\n  end\n\n\n  Parsing:::mmdcontainer\n\n  subgraph Transforming\n    space3( ):::mmdspace\n\n    transform(Last <b>transforms<b/>)\n    transformDescr(...<b>renames</b><br/>and <b>transforms</b>.):::mmddescription\n\n    parsing--\x3etransform\n  end\n\n  Transforming:::mmdcontainer\n\n  output(Output)\n  output:::mmddescription\n\n  transform .-> output"}),(0,r.yg)("admonition",{title:"Example",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Here are ",(0,r.yg)("strong",{parentName:"p"},"step-by-step")," parsing examples:"),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\u261d\ufe0f ",(0,r.yg)("b",null,"Schema")),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const now = () => new Date().toISOString()\n\nconst pokemonSchema = schema({\n  // key attributes\n  pokemonClass: string()\n    .key()\n    .transform(prefix('POKEMON'))\n    .savedAs('partitionKey'),\n  pokemonId: string().key().savedAs('sortKey'),\n\n  // timestamps\n  created: string().default(now),\n  updated: string()\n    .required('always')\n    .putDefault(now)\n    .updateDefault(now),\n\n  // other attributes\n  name: string().optional(),\n  level: number().default(1)\n}).and(prevSchema => ({\n  levelPlusOne: number().link<typeof prevSchema>(\n    ({ level }) => level + 1\n  )\n}))\n"))),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,(0,r.yg)("code",null,"'put'")," mode")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"input",label:"Input",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n  "name": "Pikachu"\n}\n'))),(0,r.yg)(l.A,{value:"defaulted",label:"Defaulted",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n+ "created": "2022-01-01T00:00:00.000Z",\n+ "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n+ "level": 1,\n}\n'))),(0,r.yg)(l.A,{value:"linked",label:"Linked",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n  "created": "2022-01-01T00:00:00.000Z",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n  "level": 1,\n+ "levelPlusOne": 2,\n}\n'))),(0,r.yg)(l.A,{value:"parsed",label:"Parsed",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n  "created": "2022-01-01T00:00:00.000Z",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n  "level": 1,\n  "levelPlusOne": 2,\n}\n+ Item is valid \u2705\n'))),(0,r.yg)(l.A,{value:"transformed",label:"Transformed",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n- "pokemonClass": "pikachu",\n+ "partitionKey": "POKEMON#pikachu",\n- "pokemonId": "123",\n+ "sortKey": "123",\n  "created": "2022-01-01T00:00:00.000Z",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "Pikachu",\n  "level": 1,\n  "levelPlusOne": 2,\n}\n'))))),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,(0,r.yg)("code",null,"'key'")," mode")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"input",label:"Input",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n+ (Only key attributes are required)\n'))),(0,r.yg)(l.A,{value:"defaulted",label:"Defaulted",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n+ No default to apply \u2705\n'))),(0,r.yg)(l.A,{value:"linked",label:"Linked",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n+ No link to apply \u2705\n'))),(0,r.yg)(l.A,{value:"parsed",label:"Parsed",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "pikachu",\n  "pokemonId": "123",\n}\n+ Item is valid \u2705\n'))),(0,r.yg)(l.A,{value:"transformed",label:"Transformed",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n- "pokemonClass": "pikachu",\n+ "partitionKey": "POKEMON#pikachu",\n- "pokemonId": "123",\n+ "sortKey": "123",\n}\n'))))),(0,r.yg)("details",{className:"details-in-admonition"},(0,r.yg)("summary",null,"\ud83d\udd0e ",(0,r.yg)("b",null,(0,r.yg)("code",null,"'update'")," mode")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"input",label:"Input",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n  "name": "PlantyDino",\n}\n'))),(0,r.yg)(l.A,{value:"defaulted",label:"Defaulted",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n+ "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n'))),(0,r.yg)(l.A,{value:"linked",label:"Linked",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n+ No updateLink to apply \u2705\n'))),(0,r.yg)(l.A,{value:"parsed",label:"Parsed",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n  "pokemonClass": "bulbasaur",\n  "pokemonId": "123",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n+ Item is valid \u2705\n'))),(0,r.yg)(l.A,{value:"transformed",label:"Transformed",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-diff"},'{\n- "pokemonClass": "bulbasaur",\n+ "partitionKey": "POKEMON#bulbasaur",\n- "pokemonId": "123",\n+ "sortKey": "123",\n  "modified": "2022-01-01T00:00:00.000Z",\n  "name": "PlantyDino",\n}\n')))))),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"parse"},(0,r.yg)("inlineCode",{parentName:"h3"},"parse(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: unknown, options?: ParseValueOptions) => ParsingResults<SCHEMA>"))),(0,r.yg)("p",null,"Parses an input of any type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsedValue = pokemonSchema.build(Parser).parse(input)\n")),(0,r.yg)("p",null,"You can provide options as a second argument. Available options:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"fill")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to complete the input (with ",(0,r.yg)("inlineCode",{parentName:"td"},"defaults")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"links"),") prior to validation or not.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"transform")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to transform the input (with ",(0,r.yg)("inlineCode",{parentName:"td"},"savedAs")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"transform"),") after validation or not.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"mode")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"key")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"update")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put")),(0,r.yg)("td",{parentName:"tr",align:null},"The mode of the parsing: Impacts which ",(0,r.yg)("inlineCode",{parentName:"td"},"default")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"link")," should be used, as well as requiredness during validation.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"parseExtension")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("em",{parentName:"td"},"(internal)")),(0,r.yg)("td",{parentName:"tr",align:"center"},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Dependency injection required to parse extended syntax (",(0,r.yg)("inlineCode",{parentName:"td"},"$get"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"$add")," etc.) when using the ",(0,r.yg)("inlineCode",{parentName:"td"},"update")," mode (check example below).")))),(0,r.yg)("admonition",{title:"Examples",type:"note"},(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"put",label:"Put",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemon = {\n  pokemonId: 'pikachu1',\n  name: 'Pikachu',\n  types: ['Electric'],\n  ...\n}\n\nconst validPokemon = pokemonSchema.build(Parser).parse(pokemon)\n"))),(0,r.yg)(l.A,{value:"key",label:"Key",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const validKey = pokemonSchema\n  .build(Parser)\n  .parse({ pokemonId: 'pikachu1' }, { mode: 'key' })\n"))),(0,r.yg)(l.A,{value:"update",label:"Update",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const validUpdate = pokemonSchema\n  .build(Parser)\n  .parse(\n    { pokemonId: 'bulbasaur1', customName: 'PlantyDino' },\n    { mode: 'update' }\n  )\n"))),(0,r.yg)(l.A,{value:"update-extended",label:"Update (extended)",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import {\n  $add,\n  parseUpdateExtension\n} from 'dynamodb-toolbox/entity/actions/update'\n\nconst validUpdate = pokemonSchema.build(Parser).parse(\n  // \ud83d\udc47 `$add` is an extension, so `parseExtension`  is needed\n  { pokemonId: 'pikachu1', customName: $add(1) },\n  { mode: 'update', parseExtension: parseUpdateExtension }\n)\n"))))),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"TransformedValue")," generic type (or ",(0,r.yg)("inlineCode",{parentName:"p"},"ValidValue")," if ",(0,r.yg)("inlineCode",{parentName:"p"},"transform")," is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),") to explicitly type an object as a parsing output object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { TransformedValue } from 'dynamodb-toolbox/schema'\n\nconst parsedKey: TransformedValue<\n  typeof pokemonSchema,\n  // \ud83d\udc47 Optional options\n  { mode: 'key' }\n  // \u274c Throws a type error\n> = { invalid: 'input' }\n")),(0,r.yg)("h3",{id:"reparse"},(0,r.yg)("inlineCode",{parentName:"h3"},"reparse(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: InputValue<SCHEMA>, options?: ParseValueOptions) => ParsingResults<SCHEMA>"))),(0,r.yg)("p",null,"Similar to ",(0,r.yg)("a",{parentName:"p",href:"#parse"},(0,r.yg)("inlineCode",{parentName:"a"},".parse")),", but with the input correctly typed (taking the mode into account) instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"unknown"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"pokemonSchema\n  .build(Parser)\n  // \u274c Throws a type error\n  .reparse({ invalid: 'input' })\n")),(0,r.yg)("p",null,"You can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"InputValue")," generic type (or ",(0,r.yg)("inlineCode",{parentName:"p"},"ValidValue")," if ",(0,r.yg)("inlineCode",{parentName:"p"},"fill")," is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),") to explicitly type an object as a parsing input object:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import type { InputValue } from 'dynamodb-toolbox/schema'\n\nconst keyInput: InputValue<\n  typeof pokemonSchema,\n  // \ud83d\udc47 Optional options\n  { mode: 'key' }\n  // \u274c Throws a type error\n> = { invalid: 'input' }\n")),(0,r.yg)("h3",{id:"start"},(0,r.yg)("inlineCode",{parentName:"h3"},"start(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: unknown, options?: ParseValueOptions) => Generator<ParsingResults<SCHEMA>>"))),(0,r.yg)("p",null,"Similar to ",(0,r.yg)("a",{parentName:"p",href:"#parse"},(0,r.yg)("inlineCode",{parentName:"a"},".parse")),", but returns the underlying ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"Generator")," to inspect the intermediate results of the parsing steps:"),(0,r.yg)("admonition",{title:"Examples",type:"note"},(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"complete",label:"Complete",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsingGenerator = pokemonSchema\n  .build(Parser)\n  .start(pokemon)\n\nconst defaultedPokemon = parsingGenerator.next().value\nconst linkedPokemon = parsingGenerator.next().value\nconst parsedPokemon = parsingGenerator.next().value\nconst transformedPokemon = parsingGenerator.next().value\n"))),(0,r.yg)(l.A,{value:"transformed",label:"Transformed only",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsingGenerator = pokemonSchema\n  .build(Parser)\n  .start(pokemon, { fill: false })\n\n// \ud83d\udc47 No `fill` step\nconst parsedPokemon = parsingGenerator.next().value\nconst transformedPokemon = parsingGenerator.next().value\n"))),(0,r.yg)(l.A,{value:"filled",label:"Filled only",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const parsingGenerator = pokemonSchema\n  .build(Parser)\n  .start(pokemon, { transform: false })\n\nconst defaultedPokemon = parsingGenerator.next().value\nconst linkedPokemon = parsingGenerator.next().value\nconst parsedPokemon = parsingGenerator.next().value\n// \ud83d\udc46 No `transform` step\n"))))),(0,r.yg)("h3",{id:"validate"},(0,r.yg)("inlineCode",{parentName:"h3"},"validate(...)")),(0,r.yg)("p",{style:{marginTop:"-15px"}},(0,r.yg)("i",null,(0,r.yg)("code",null,"(input: unknown, options?: ValidationOptions) => boolean"))),(0,r.yg)("p",null,"Runs only the ",(0,r.yg)("strong",{parentName:"p"},"parsing step")," of the parsing workflow on the provided input. Returns ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," if the input is valid, catches any parsing error and returns ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," otherwise:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const isValid = pokemonSchema.build(Parser).validate(input)\n")),(0,r.yg)("p",null,"Note that ",(0,r.yg)("inlineCode",{parentName:"p"},".validate(...)")," acts as a ",(0,r.yg)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html"},"type guard"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"if (pokemonSchema.build(Parser).validate(input)) {\n  // \ud83d\ude4c Typed as `Pokemon`!\n  const { level, name } = input\n  ...\n}\n")),(0,r.yg)("p",null,"Available options:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"center"},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"mode")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"key")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"update")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("inlineCode",{parentName:"td"},"put")),(0,r.yg)("td",{parentName:"tr",align:null},"The mode of the parsing: Impacts requiredness during validation.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"parseExtension")),(0,r.yg)("td",{parentName:"tr",align:"center"},(0,r.yg)("em",{parentName:"td"},"(internal)")),(0,r.yg)("td",{parentName:"tr",align:"center"},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"Dependency injection required to parse extended syntax (",(0,r.yg)("inlineCode",{parentName:"td"},"$get"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"$add")," etc.) when using the ",(0,r.yg)("inlineCode",{parentName:"td"},"update")," mode (check example below).")))),(0,r.yg)("admonition",{title:"Examples",type:"note"},(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"put",label:"Put",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const pokemon = {\n  pokemonId: 'pikachu1',\n  name: 'Pikachu',\n  types: ['Electric'],\n  ...\n}\n\nconst isValid = pokemonSchema.build(Parser).validate(pokemon)\n"))),(0,r.yg)(l.A,{value:"key",label:"Key",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const isValid = pokemonSchema\n  .build(Parser)\n  .validate({ pokemonId: 'pikachu1' }, { mode: 'key' })\n"))),(0,r.yg)(l.A,{value:"update",label:"Update",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"const isValid = pokemonSchema\n  .build(Parser)\n  .validate(\n    { pokemonId: 'bulbasaur1', customName: 'PlantyDino' },\n    { mode: 'update' }\n  )\n"))),(0,r.yg)(l.A,{value:"update-extended",label:"Update (extended)",mdxType:"TabItem"},(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"import {\n  $add,\n  parseUpdateExtension\n} from 'dynamodb-toolbox/entity/actions/update'\n\nconst isValid = pokemonSchema.build(Parser).validate(\n  // \ud83d\udc47 `$add` is an extension, so `parseExtension`  is needed\n  { pokemonId: 'pikachu1', customName: $add(1) },\n  { mode: 'update', parseExtension: parseUpdateExtension }\n)\n"))))))}g.isMDXComponent=!0}}]);